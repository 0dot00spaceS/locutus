<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://purl.org/NET/erdf/profile">
 <title>PHP: Math Functions - Manual</title>
 <style type="text/css" media="all">
  @import url("http://static.php.net/www.php.net/styles/site.css");
  @import url("http://static.php.net/www.php.net/styles/phpnet.css");
 </style>
 <!--[if IE]><![if gte IE 6]><![endif]-->
  <style type="text/css" media="print">
   @import url("http://static.php.net/www.php.net/styles/print.css");
  </style>
 <!--[if IE]><![endif]><![endif]-->
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
 <link rel="shortcut icon" href="http://static.php.net/www.php.net/favicon.ico" />
 <link rel="contents" href="index.php" />
 <link rel="index" href="book.math.php" />
 <link rel="prev" href="book.math.php" />
 <link rel="next" href="function.abs.php" />
 <link rel="schema.dc" href="http://purl.org/dc/elements/1.1/" />
 <link rel="schema.rdfs" href="http://www.w3.org/2000/01/rdf-schema#" />
 <script type="text/javascript" src="http://static.php.net/www.php.net/userprefs.js"></script>
 <base href="http://www.php.net/manual/en/ref.math.php" />
</head>
<body>

<div id="headnav">
 <a href="/" rel="home"><img src="http://static.php.net/www.php.net/images/php.gif"
 alt="PHP" width="120" height="67" /></a>
 <div id="headmenu">
  <a href="/downloads.php">downloads</a> |
  <a href="/docs.php">documentation</a> |
  <a href="/FAQ.php">faq</a> |
  <a href="/support.php">getting help</a> |
  <a href="/mailing-lists.php">mailing lists</a> |
  <a href="http://bugs.php.net/">reporting bugs</a> |
  <a href="/sites.php">php.net sites</a> |
  <a href="/links.php">links</a> |
  <a href="/conferences/">conferences</a> |
  <a href="/my.php">my php.net</a>
 </div>
</div>

<div id="headsearch">
 <form method="post" action="/search.php" id="topsearch">
  <p>
   <span title="Keyboard shortcut: Alt+S (Win), Ctrl+S (Apple)">
    <span class="shortkey">s</span>earch for
   </span>
   <input type="text" name="pattern" value="" size="30" accesskey="s" />
   <span>in the</span>
   <select name="show">
    <option value="quickref" selected="selected">function list</option>
    <option value="all"      >all php.net sites</option>
    <option value="local"    >this mirror only</option>
    <option value="manual"   >online documentation</option>
    <option value="bugdb"    >bug database</option>
    <option value="news_archive">Site News Archive</option>
    <option value="changelogs">All Changelogs</option>
    <option value="pear"     >just pear.php.net</option>
    <option value="pecl"     >just pecl.php.net</option>
    <option value="talks"    >just talks.php.net</option>
    <option value="maillist" >general mailing list</option>
    <option value="devlist"  >developer mailing list</option>
    <option value="phpdoc"   >documentation mailing list</option>
   </select>
   <input type="image"
          src="http://static.php.net/www.php.net/images/small_submit_white.gif"
          class="submit" alt="search" />
   <input type="hidden" name="lang" value="en" />
  </p>
 </form>
</div>

<div id="layout_2">
 <div id="leftbar">
<!--UdmComment-->
<ul class="toc">
 <li class="header home"><a href="index.php">PHP Manual</a></li>
 <li class="header up"><a href="funcref.php">Function Reference</a></li>
 <li class="header up"><a href="refs.mathcrypto.math.php">Mathematical Extensions</a></li>
 <li class="header up"><a href="book.math.php">Mathematical Functions</a></li>
 <li><a href="intro.math.php">Introduction</a></li>
 <li><a href="math.setup.php">Installing/Configuring</a></li>
 <li><a href="math.constants.php">Predefined Constants</a></li>
 <li class="active"><a href="ref.math.php">Math Functions</a></li>
</ul><!--/UdmComment-->

 </div>
 <div id="content" class="manual/en">
<!--UdmComment-->
<div class="manualnavbar manualnavbar_top">
 <span class="next">
  <a href="function.abs.php">abs<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.math.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Math</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  <form action="/manual/change.php" method="get">
   <p>view this page in </p><fieldset><select name="page">
    <option value="bg/ref.math.php">Bulgarian</option>
    <option value="pt_BR/ref.math.php">Brazilian Portuguese</option>
    <option value="fr/ref.math.php">French</option>
    <option value="de/ref.math.php">German</option>
    <option value="it/ref.math.php">Italian</option>
    <option value="ja/ref.math.php">Japanese</option>
    <option value="pl/ref.math.php">Polish</option>
    <option value="ro/ref.math.php">Romanian</option>
    <option value="ru/ref.math.php">Russian</option>
    <option value="es/ref.math.php">Spanish</option>
    <option value="help-translate.php">Other</option>
   </select>
   <input type="image" src="http://static.php.net/www.php.net/images/small_submit.gif" id="changeLangImage" alt="" />
  </fieldset></form>
 </div>
</div>
<!--/UdmComment-->

<div>
 <h1 class="title">Math Functions</h1>

 
































































































































































































































































































<h2>Table of Contents</h2><ul class="chunklist chunklist_reference"><li><a href="function.abs.php">abs</a> — Absolute value</li><li><a href="function.acos.php">acos</a> — Arc cosine</li><li><a href="function.acosh.php">acosh</a> — Inverse hyperbolic cosine</li><li><a href="function.asin.php">asin</a> — Arc sine</li><li><a href="function.asinh.php">asinh</a> — Inverse hyperbolic sine</li><li><a href="function.atan2.php">atan2</a> — Arc tangent of two variables</li><li><a href="function.atan.php">atan</a> — Arc tangent</li><li><a href="function.atanh.php">atanh</a> — Inverse hyperbolic tangent</li><li><a href="function.base-convert.php">base_convert</a> — Convert a number between arbitrary bases</li><li><a href="function.bindec.php">bindec</a> — Binary to decimal</li><li><a href="function.ceil.php">ceil</a> — Round fractions up</li><li><a href="function.cos.php">cos</a> — Cosine</li><li><a href="function.cosh.php">cosh</a> — Hyperbolic cosine</li><li><a href="function.decbin.php">decbin</a> — Decimal to binary</li><li><a href="function.dechex.php">dechex</a> — Decimal to hexadecimal</li><li><a href="function.decoct.php">decoct</a> — Decimal to octal</li><li><a href="function.deg2rad.php">deg2rad</a> — Converts the number in degrees to the radian equivalent</li><li><a href="function.exp.php">exp</a> — Calculates the exponent of e</li><li><a href="function.expm1.php">expm1</a> — Returns exp(number) - 1, computed in a way that is accurate even
   when the value of number is close to zero</li><li><a href="function.floor.php">floor</a> — Round fractions down</li><li><a href="function.fmod.php">fmod</a> — Returns the floating point remainder (modulo) of the division
  of the arguments</li><li><a href="function.getrandmax.php">getrandmax</a> — Show largest possible random value</li><li><a href="function.hexdec.php">hexdec</a> — Hexadecimal to decimal</li><li><a href="function.hypot.php">hypot</a> — Calculate the length of the hypotenuse of a right-angle triangle</li><li><a href="function.is-finite.php">is_finite</a> — Finds whether a value is a legal finite number</li><li><a href="function.is-infinite.php">is_infinite</a> — Finds whether a value is infinite</li><li><a href="function.is-nan.php">is_nan</a> — Finds whether a value is not a number</li><li><a href="function.lcg-value.php">lcg_value</a> — Combined linear congruential generator</li><li><a href="function.log10.php">log10</a> — Base-10 logarithm</li><li><a href="function.log1p.php">log1p</a> — Returns log(1 + number), computed in a way that is accurate even when
   the value of number is close to zero</li><li><a href="function.log.php">log</a> — Natural logarithm</li><li><a href="function.max.php">max</a> — Find highest value</li><li><a href="function.min.php">min</a> — Find lowest value</li><li><a href="function.mt-getrandmax.php">mt_getrandmax</a> — Show largest possible random value</li><li><a href="function.mt-rand.php">mt_rand</a> — Generate a better random value</li><li><a href="function.mt-srand.php">mt_srand</a> — Seed the better random number generator</li><li><a href="function.octdec.php">octdec</a> — Octal to decimal</li><li><a href="function.pi.php">pi</a> — Get value of pi</li><li><a href="function.pow.php">pow</a> — Exponential expression</li><li><a href="function.rad2deg.php">rad2deg</a> — Converts the radian number to the equivalent number in degrees</li><li><a href="function.rand.php">rand</a> — Generate a random integer</li><li><a href="function.round.php">round</a> — Rounds a float</li><li><a href="function.sin.php">sin</a> — Sine</li><li><a href="function.sinh.php">sinh</a> — Hyperbolic sine</li><li><a href="function.sqrt.php">sqrt</a> — Square root</li><li><a href="function.srand.php">srand</a> — Seed the random number generator</li><li><a href="function.tan.php">tan</a> — Tangent</li><li><a href="function.tanh.php">tanh</a> — Hyperbolic tangent</li></ul>
</div>
<br /><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.abs.php">abs<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.math.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Math</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


<div id="usernotes">
 <div class="head">
  <span class="action"><a href="/manual/add-note.php?sect=ref.math&amp;redirect=http://www.php.net/manual/en/ref.math.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.math&amp;redirect=http://www.php.net/manual/en/ref.math.php">add a note</a></small></span>
  <small>User Contributed Notes</small><br />
  <strong>Math Functions</strong>
 </div>
 <a name="82196"></a>
 <div class="note">
  <strong>PiledHigher at jovi dot net</strong><br />
  <a href="#82196">31-Mar-2008 09:47</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
// Ordinal one liner tests good up to PHP_INT_MAX-7 on GNU/Linux<br />
function ordinal($n) {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; return $n . gmdate("S", (((abs($n) + 9) % 10) + ((abs($n / 10) % 10) == 1) * 10) * 86400);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />
}</span>
</code></div>
  </div>
 </div>
 <a name="80834"></a>
 <div class="note">
  <strong>lummox</strong><br />
  <a href="#80834">02-Feb-2008 07:24</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Wouldn't the following function do the same but a lot easier than the one in the comment before?<br />
<br />
function trimInteger($targetNumber,$newLength) {<br />
&nbsp;&nbsp;&nbsp; return $targetNumber%pow(10,$newLength); <br />
}</span>
</code></div>
  </div>
 </div>
 <a name="80319"></a>
 <div class="note">
  <strong>Mike</strong><br />
  <a href="#80319">09-Jan-2008 07:23</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
//had a mistake in last post, heres the corrected version<br />
<br />
/*<br />
Just a simple function to trim digits from the left side of an integer. TRIM DOWN TO 4-&gt; (ie. 987654 =&gt; 7654)<br />
*/<br />
<br />
function trimInteger($targetNumber,$newLength) {<br />
<br />
&nbsp;&nbsp;&nbsp; $digits = pow(10,$newLength);<br />
<br />
&nbsp;&nbsp;&nbsp; $s = ($targetNumber/ $digits); //make the last X digits the&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decimal part<br />
<br />
&nbsp;&nbsp;&nbsp; $t = floor($targetNumber / $digits); //drop the last X digits (the decimal part)<br />
<br />
&nbsp;&nbsp;&nbsp; $h = $s - $t; //remove all&nbsp; but the decimal part<br />
<br />
&nbsp;&nbsp;&nbsp; $newInteger = ($h*$digits); //make the everything after the decimal point the new number<br />
<br />
&nbsp;&nbsp;&nbsp; return $newInteger;<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="77609"></a>
 <div class="note">
  <strong>ddarjany at yahoo dot com</strong><br />
  <a href="#77609">05-Sep-2007 10:25</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Tim's fix of Evan's ordinal function causes another problem, it no longer works for number above 100.&nbsp; (E.g. it returns 111st instead of 111th).&nbsp; <br />
Here is a further modified version which should work for all numbers.<br />
<br />
<span class="default">&lt;?PHP<br />
<br />
</span><span class="keyword">function </span><span class="default">ordinal</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">)&nbsp; &nbsp; {<br />
&nbsp; </span><span class="default">$cardinal </span><span class="keyword">= (int)</span><span class="default">$cardinal</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$digit </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">, -</span><span class="default">1</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
<br />
&nbsp; if (</span><span class="default">$cardinal </span><span class="keyword">&lt;</span><span class="default">100</span><span class="keyword">) </span><span class="default">$tens </span><span class="keyword">= </span><span class="default">round</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">/</span><span class="default">10</span><span class="keyword">);<br />
&nbsp; else </span><span class="default">$tens </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">, -</span><span class="default">2</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
<br />
&nbsp; if(</span><span class="default">$tens </span><span class="keyword">== </span><span class="default">1</span><span class="keyword">)&nbsp; {<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'th'</span><span class="keyword">;<br />
&nbsp; }<br />
<br />
&nbsp; switch(</span><span class="default">$digit</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; case </span><span class="default">1</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'st'</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; case </span><span class="default">2</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'nd'</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; case </span><span class="default">3</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'rd'</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; default:<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'th'</span><span class="keyword">;<br />
&nbsp; }<br />
}<br />
&nbsp;</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="74444"></a>
 <div class="note">
  <a href="#74444">11-Apr-2007 11:55</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is another way of calculating the nth term of the Fibonacci sequence, based on Binet's formula (see <a href="http://en.wikipedia.org/wiki/Fibonacci_series#Closed_form_expression" target="_blank">http://en.wikipedia.org/wiki/Fibonacci_series#Closed_form_expression</a> for more information on this).<br />
In this example, it would display the 17th term of the Fibonacci sequence.<br />
<br />
<span class="default">&lt;?php<br />
<br />
$n </span><span class="keyword">= </span><span class="default">17</span><span class="keyword">; </span><span class="comment">// Sets a value for $n, the nth term<br />
</span><span class="default">$phi </span><span class="keyword">= (</span><span class="default">1 </span><span class="keyword">+ </span><span class="default">sqrt</span><span class="keyword">(</span><span class="default">5</span><span class="keyword">)) / </span><span class="default">2</span><span class="keyword">; </span><span class="comment">// Sets the value of phi for use in the formula<br />
</span><span class="default">$u </span><span class="keyword">= (</span><span class="default">pow</span><span class="keyword">(</span><span class="default">$phi</span><span class="keyword">, </span><span class="default">$n</span><span class="keyword">) - </span><span class="default">pow</span><span class="keyword">(</span><span class="default">1 </span><span class="keyword">- </span><span class="default">$phi</span><span class="keyword">, </span><span class="default">$n</span><span class="keyword">)) / </span><span class="default">sqrt</span><span class="keyword">(</span><span class="default">5</span><span class="keyword">);<br />
echo </span><span class="string">"U&lt;sub&gt;$n&lt;/sub&gt; = $u"</span><span class="keyword">;<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
Here is a script that lists the Fibonacci sequence from whatever two terms you specify, in this example from the 12th term to the 27th term (inclusive).<br />
<br />
<span class="default">&lt;?php<br />
<br />
$f </span><span class="keyword">= </span><span class="default">12</span><span class="keyword">; </span><span class="comment">// Sets the 'f'th term, the term from which to start listing<br />
</span><span class="default">$t </span><span class="keyword">= </span><span class="default">27</span><span class="keyword">; </span><span class="comment">//Sets the 't'th term, the term at which to stop listing<br />
</span><span class="default">$phi </span><span class="keyword">= (</span><span class="default">1 </span><span class="keyword">+ </span><span class="default">sqrt</span><span class="keyword">(</span><span class="default">5</span><span class="keyword">)) / </span><span class="default">2</span><span class="keyword">; </span><span class="comment">// Sets the value of phi for use in the formula<br />
</span><span class="keyword">while(</span><span class="default">$f </span><span class="keyword">&lt;= </span><span class="default">$t</span><span class="keyword">) {<br />
&nbsp; </span><span class="default">$u </span><span class="keyword">= (</span><span class="default">pow</span><span class="keyword">(</span><span class="default">$phi</span><span class="keyword">, </span><span class="default">$f</span><span class="keyword">) - </span><span class="default">pow</span><span class="keyword">(</span><span class="default">1 </span><span class="keyword">- </span><span class="default">$phi</span><span class="keyword">, </span><span class="default">$f</span><span class="keyword">)) / </span><span class="default">sqrt</span><span class="keyword">(</span><span class="default">5</span><span class="keyword">);<br />
&nbsp; echo </span><span class="string">"U&lt;sub&gt;$f&lt;/sub&gt; = $u&lt;br&gt;\n"</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$f</span><span class="keyword">++;<br />
}<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="71502"></a>
 <div class="note">
  <strong>barry at megaspace dot com</strong><br />
  <a href="#71502">02-Dec-2006 09:14</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here's a least common denominator (lcd) function:<br />
<br />
$array = array(3,4,6,8,18,2);<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function lcd($array,$x) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $mod_sum = 0;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; for($int=1;$int &lt; count($array);$int++) {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $modulus[$int] = ($array[0]*$x) % ($array[$int]);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $mod_sum = $mod_sum + $modulus[$int];&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!$mod_sum) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; echo "LCD: ".($array[0]*$x)."\n";<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lcd($array,$x+1);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
lcd($array,1);</span>
</code></div>
  </div>
 </div>
 <a name="70969"></a>
 <div class="note">
  <strong>tembenite at gmail dot com</strong><br />
  <a href="#70969">06-Nov-2006 01:36</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
To add to what Cornelius had, I have written a function that will take an array of numbers and return the least common multiple of them:<br />
<br />
function lcm_arr($items){<br />
&nbsp;&nbsp;&nbsp; //Input: An Array of numbers<br />
&nbsp;&nbsp;&nbsp; //Output: The LCM of the numbers<br />
&nbsp;&nbsp;&nbsp; while(2 &lt;= count($items)){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; array_push($items, lcm(array_shift($items), array_shift($items)));<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; return reset($items);<br />
}<br />
<br />
//His Code below with $'s added for vars<br />
<br />
function gcd($n, $m) {<br />
&nbsp;&nbsp; $n=abs($n); $m=abs($m);<br />
&nbsp;&nbsp; if ($n==0 and $m==0)<br />
&nbsp;&nbsp; &nbsp; &nbsp; return 1; //avoid infinite recursion<br />
&nbsp;&nbsp; if ($n==$m and $n&gt;=1)<br />
&nbsp;&nbsp; &nbsp; &nbsp; return $n;<br />
&nbsp;&nbsp; return $m&lt;$n?gcd($n-$m,$n):gcd($n,$m-$n);<br />
}<br />
<br />
function lcm($n, $m) {<br />
&nbsp;&nbsp; return $m * ($n/gcd($n,$m));<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="70775"></a>
 <div class="note">
  <strong>tim at durge dot org</strong><br />
  <a href="#70775">27-Oct-2006 05:51</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
In Evan's ordinal function, the line:<br />
<br />
<span class="default">&lt;?php<br />
&nbsp; $tens </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">, -</span><span class="default">2</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
</span><span class="default">?&gt;<br />
</span><br />
needs to be replaced by:<br />
<br />
<span class="default">&lt;?php<br />
&nbsp; $tens </span><span class="keyword">= </span><span class="default">round</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">/</span><span class="default">10</span><span class="keyword">);<br />
</span><span class="default">?&gt;<br />
</span><br />
or similar. At least on PHP 4.3.10,&nbsp; substr("1", -2, 1)&nbsp; returns '1' - so Evan's function gives "1th", as well as "11th".&nbsp; This is contrary to the documentation, but is noted in the comments on the substr manual page.</span>
</code></div>
  </div>
 </div>
 <a name="68429"></a>
 <div class="note">
  <strong>Evan Broder</strong><br />
  <a href="#68429">26-Jul-2006 11:42</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
A slightly more complex but much more accurate cardinal=&gt;ordinal function (the one below doesn't account for 11th, 12th, and 13th, which don't follow the usual rules):<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">ordinal</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$cardinal </span><span class="keyword">= (int)</span><span class="default">$cardinal</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$digit </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">, -</span><span class="default">1</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$tens </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$cardinal</span><span class="keyword">, -</span><span class="default">2</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$tens </span><span class="keyword">== </span><span class="default">1</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'th'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; switch(</span><span class="default">$digit</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">1</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'st'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">2</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'nd'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">3</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'rd'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; default:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$cardinal</span><span class="keyword">.</span><span class="string">'th'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="68262"></a>
 <div class="note">
  <strong>edward at edwardsun dot com</strong><br />
  <a href="#68262">19-Jul-2006 06:24</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
well just a note.. maybe i'm a bit stupid.. but remember to use pow() rather than the "^" sign for exponents.. as it took me 5 minutes to figure out why it wasn't working.</span>
</code></div>
  </div>
 </div>
 <a name="68071"></a>
 <div class="note">
  <strong>jaakko dot mantila at sagas dot fi</strong><br />
  <a href="#68071">12-Jul-2006 03:10</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is another payment function with working future value($fv) option:<br />
<br />
function payment($r,$np,$pv,$fv,$prec) {<br />
&nbsp;&nbsp; /* Calculates the monthly payment<br />
&nbsp;&nbsp; ** $apr = the annual percentage rate of the loan.<br />
&nbsp;&nbsp; ** $n&nbsp; = number of monthly payments (360 for a 30year loan)<br />
&nbsp;&nbsp; ** $pv&nbsp; &nbsp; = present value or principal of the loan<br />
&nbsp;&nbsp; ** $fv&nbsp; = future value of the loan (after payments)<br />
&nbsp;&nbsp; ** $prec = the precision you wish rounded to<br />
&nbsp;&nbsp; */<br />
&nbsp;&nbsp; /****************************************\<br />
&nbsp;&nbsp; ** No Warranty is expressed or implied. **<br />
&nbsp;&nbsp; *****************************************/<br />
if(!$fv) $fv = 0;<br />
$mypmt=$r * (-$fv+pow((1+$r),$np)*$pv)/(-1+pow((1+$r),$np));<br />
return round($mypmt, $prec);<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="67956"></a>
 <div class="note">
  <strong>twoscoopsofpig at NOSPAM dot gmail dot com</strong><br />
  <a href="#67956">07-Jul-2006 09:07</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
@ Moikboy:<br />
<br />
This may or may not be more simplified factorialization:<br />
<br />
<span class="default">&lt;?php<br />
$f</span><span class="keyword">=</span><span class="default">$fact</span><span class="keyword">=</span><span class="default">25</span><span class="keyword">;<br />
while (</span><span class="default">$fact</span><span class="keyword">&gt;</span><span class="default">0</span><span class="keyword">)<br />
{</span><span class="default">$f</span><span class="keyword">=</span><span class="default">$f</span><span class="keyword">*</span><span class="default">$fact</span><span class="keyword">--;}<br />
echo </span><span class="default">$f</span><span class="keyword">;<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="67510"></a>
 <div class="note">
  <strong>marasek.SPAMLESS at telton.de</strong><br />
  <a href="#67510">08-Jun-2006 05:23</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I could not resist to do a simpler version of the ordinal function:<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">ordinal</span><span class="keyword">(</span><span class="default">$num</span><span class="keyword">)<br />
{<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$num </span><span class="keyword">= (int)</span><span class="default">$num</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$digit </span><span class="keyword">= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$num</span><span class="keyword">, -</span><span class="default">1</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$ord </span><span class="keyword">= </span><span class="string">"th"</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; switch(</span><span class="default">$digit</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">1</span><span class="keyword">: </span><span class="default">$ord </span><span class="keyword">= </span><span class="string">"st"</span><span class="keyword">; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">2</span><span class="keyword">: </span><span class="default">$ord </span><span class="keyword">= </span><span class="string">"nd"</span><span class="keyword">; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">3</span><span class="keyword">: </span><span class="default">$ord </span><span class="keyword">= </span><span class="string">"rd"</span><span class="keyword">; break;<br />
&nbsp;&nbsp;&nbsp; break;<br />
&nbsp;&nbsp;&nbsp; }<br />
return </span><span class="default">$num</span><span class="keyword">.</span><span class="default">$ord</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;<br />
</span>One could replace the typecast with<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">if(</span><span class="default">$num</span><span class="keyword">===</span><span class="default">NULL </span><span class="keyword">or </span><span class="default">$num</span><span class="keyword">===</span><span class="string">""</span><span class="keyword">)<br />
{return </span><span class="default">NULL</span><span class="keyword">;}<br />
</span><span class="default">?&gt;<br />
</span><br />
to get an empty result instead of "0th" in case $num is empty too.</span>
</code></div>
  </div>
 </div>
 <a name="65923"></a>
 <div class="note">
  <strong>moikboy (nospam!) moikboy (nospam!) hu</strong><br />
  <a href="#65923">10-May-2006 01:15</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I think, this is the optimal code for calculating factorials:<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">fact</span><span class="keyword">(</span><span class="default">$int</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; if(</span><span class="default">$int</span><span class="keyword">&lt;</span><span class="default">2</span><span class="keyword">)return </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; for(</span><span class="default">$f</span><span class="keyword">=</span><span class="default">2</span><span class="keyword">;</span><span class="default">$int</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">&gt;</span><span class="default">1</span><span class="keyword">;</span><span class="default">$f</span><span class="keyword">*=</span><span class="default">$int</span><span class="keyword">--);<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$f</span><span class="keyword">;<br />
};<br />
</span><span class="default">?&gt;<br />
</span><br />
And another one for calculating the $int-th Fibonacci-number:<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">fib</span><span class="keyword">(</span><span class="default">$int</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; static </span><span class="default">$fibTable</span><span class="keyword">=array();<br />
&nbsp;&nbsp;&nbsp; return empty(</span><span class="default">$fibTable</span><span class="keyword">[</span><span class="default">$int</span><span class="keyword">])?</span><span class="default">$fibTable</span><span class="keyword">[</span><span class="default">$int</span><span class="keyword">] = </span><span class="default">$int</span><span class="keyword">&gt;</span><span class="default">1</span><span class="keyword">?</span><span class="default">fib</span><span class="keyword">(</span><span class="default">$int</span><span class="keyword">-</span><span class="default">2</span><span class="keyword">)+</span><span class="default">fib</span><span class="keyword">(</span><span class="default">$int</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">):</span><span class="default">1</span><span class="keyword">:</span><span class="default">$fibTable</span><span class="keyword">[</span><span class="default">$int</span><span class="keyword">];<br />
};<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="63389"></a>
 <div class="note">
  <strong>nessthehero at comcast dot net</strong><br />
  <a href="#63389">21-Mar-2006 02:48</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Just a simple function to find the ordinal ending to any number if you're printing for example: "The nth result is..."<br />
<br />
function ordinal($num) {<br />
&nbsp;&nbsp;&nbsp; $digit = substr($num,-1,1);<br />
&nbsp;&nbsp;&nbsp; $ord = array(<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 0 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 1 =&gt; 'st',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 2 =&gt; 'nd',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 3 =&gt; 'rd',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 4 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 5 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 6 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 7 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 8 =&gt; 'th',<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 9 =&gt; 'th'<br />
&nbsp;&nbsp;&nbsp; );&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp;&nbsp; $string = $num.$ord[$digit];<br />
&nbsp;&nbsp;&nbsp; return $string;<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="62583"></a>
 <div class="note">
  <strong>Florian</strong><br />
  <a href="#62583">03-Mar-2006 01:36</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
A function that simulates the sum operator. (<a href="http://en.wikipedia.org/wiki/Sum" target="_blank">http://en.wikipedia.org/wiki/Sum</a>). Be careful with the expression because it may cause a security hole; note the single quotes to don't parse the "$".<br />
<span class="default">&lt;?php<br />
</span><span class="comment"># @param&nbsp; &nbsp; string&nbsp; &nbsp; $expr&nbsp; &nbsp; expression to evaluate (for example (2*$x)^2+1)<br />
# @param&nbsp; &nbsp; string&nbsp; &nbsp; $var&nbsp; &nbsp; &nbsp; dummy variable (for example "x")<br />
# @param&nbsp; &nbsp; integer&nbsp; &nbsp; $start<br />
# @param&nbsp; &nbsp; integer&nbsp; &nbsp; $end<br />
# @param&nbsp; &nbsp; integer&nbsp; &nbsp; $step<br />
<br />
</span><span class="keyword">function </span><span class="default">sum</span><span class="keyword">(</span><span class="default">$expr</span><span class="keyword">,</span><span class="default">$var</span><span class="keyword">,</span><span class="default">$start</span><span class="keyword">,</span><span class="default">$end</span><span class="keyword">,</span><span class="default">$step </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$expr </span><span class="keyword">= </span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">';'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">,</span><span class="default">$expr</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$var </span><span class="keyword">= </span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'$'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">,</span><span class="default">$var</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$start </span><span class="keyword">= (int)</span><span class="default">$start</span><span class="keyword">;&nbsp; &nbsp; </span><span class="default">$end </span><span class="keyword">= (int)</span><span class="default">$end</span><span class="keyword">;&nbsp; &nbsp; </span><span class="default">$step </span><span class="keyword">= (int)</span><span class="default">$step</span><span class="keyword">;&nbsp; &nbsp; </span><span class="default">$sum </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; for (</span><span class="default">$i </span><span class="keyword">= </span><span class="default">$start</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&lt;= </span><span class="default">$end</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">= </span><span class="default">$i </span><span class="keyword">+ </span><span class="default">$step</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_expr </span><span class="keyword">= </span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'$'</span><span class="keyword">.</span><span class="default">$var</span><span class="keyword">,</span><span class="default">$i</span><span class="keyword">,</span><span class="default">$expr</span><span class="keyword">);&nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_eval </span><span class="keyword">= </span><span class="string">'$_result = '</span><span class="keyword">.</span><span class="default">$_expr</span><span class="keyword">.</span><span class="string">'; return $_result;'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_result </span><span class="keyword">= eval(</span><span class="default">$_eval</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$result </span><span class="keyword">=== </span><span class="default">FALSE</span><span class="keyword">) return </span><span class="string">"SYNTAX ERROR : $expr"</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$sum </span><span class="keyword">+= </span><span class="default">$_result</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; return (int)</span><span class="default">$sum</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="62010"></a>
 <div class="note">
  <strong>jos at gtacrime dot nl</strong><br />
  <a href="#62010">17-Feb-2006 01:39</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Thanks to Chronial "at" cyberpunkuniverse.de, I was able to create the binompdf(n, p, k) function.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">nCr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">, </span><span class="default">$k</span><span class="keyword">){<br />
&nbsp;&nbsp; if (</span><span class="default">$k </span><span class="keyword">&gt; </span><span class="default">$n</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; return </span><span class="default">NaN</span><span class="keyword">;<br />
&nbsp;&nbsp; if ((</span><span class="default">$n </span><span class="keyword">- </span><span class="default">$k</span><span class="keyword">) &lt; </span><span class="default">$k</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; return </span><span class="default">nCr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">, (</span><span class="default">$n </span><span class="keyword">- </span><span class="default">$k</span><span class="keyword">));<br />
&nbsp;&nbsp; </span><span class="default">$return </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; for (</span><span class="default">$i</span><span class="keyword">=</span><span class="default">0</span><span class="keyword">; </span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">$k</span><span class="keyword">; </span><span class="default">$i</span><span class="keyword">++){<br />
&nbsp;&nbsp; &nbsp; </span><span class="default">$return </span><span class="keyword">*= (</span><span class="default">$n </span><span class="keyword">- </span><span class="default">$i</span><span class="keyword">) / (</span><span class="default">$i </span><span class="keyword">+ </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
&nbsp;&nbsp; return </span><span class="default">$return</span><span class="keyword">;<br />
} <br />
<br />
function </span><span class="default">binompdf</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">, </span><span class="default">$p</span><span class="keyword">, </span><span class="default">$k</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$return </span><span class="keyword">= </span><span class="default">nCr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">, </span><span class="default">$k</span><span class="keyword">) * </span><span class="default">pow</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">, </span><span class="default">$k</span><span class="keyword">) * </span><span class="default">pow</span><span class="keyword">((</span><span class="default">1 </span><span class="keyword">- </span><span class="default">$p</span><span class="keyword">), (</span><span class="default">$n </span><span class="keyword">- </span><span class="default">$k</span><span class="keyword">));<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$return</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="61377"></a>
 <div class="note">
  <strong>peter-stangl at t-online dot de</strong><br />
  <a href="#61377">01-Feb-2006 03:16</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I needed to approximate an integral because i was not able to calculate it, so i wrote this function. It approximates an integral with the composite Simpson's rule.<br />
More information on Simpson's rule: <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule" target="_blank">http://en.wikipedia.org/wiki/Simpson%27s_rule</a><br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">function </span><span class="default">simpsonf</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">){<br />
</span><span class="comment">// returns f(x) for integral approximation with composite Simpson's rule<br />
&nbsp;&nbsp; </span><span class="keyword">return(</span><span class="default">pow</span><span class="keyword">((</span><span class="default">1</span><span class="keyword">+</span><span class="default">pow</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">, (-</span><span class="default">4</span><span class="keyword">))), </span><span class="default">0.5</span><span class="keyword">));<br />
}<br />
function </span><span class="default">simpsonsrule</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">, </span><span class="default">$b</span><span class="keyword">, </span><span class="default">$n</span><span class="keyword">){<br />
</span><span class="comment">// approximates integral_a_b f(x) dx with composite Simpson's rule with $n intervals<br />
// $n has to be an even number<br />
// f(x) is defined in "function simpsonf($x)"<br />
&nbsp;&nbsp; </span><span class="keyword">if(</span><span class="default">$n</span><span class="keyword">%</span><span class="default">2</span><span class="keyword">==</span><span class="default">0</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$h</span><span class="keyword">=(</span><span class="default">$b</span><span class="keyword">-</span><span class="default">$a</span><span class="keyword">)/</span><span class="default">$n</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$S</span><span class="keyword">=</span><span class="default">simpsonf</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">)+</span><span class="default">simpsonf</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$i</span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; while(</span><span class="default">$i </span><span class="keyword">&lt;= (</span><span class="default">$n</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">)){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$xi</span><span class="keyword">=</span><span class="default">$a</span><span class="keyword">+</span><span class="default">$h</span><span class="keyword">*</span><span class="default">$i</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if(</span><span class="default">$i</span><span class="keyword">%</span><span class="default">2</span><span class="keyword">==</span><span class="default">0</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$S</span><span class="keyword">=</span><span class="default">$S</span><span class="keyword">+</span><span class="default">2</span><span class="keyword">*</span><span class="default">simpsonf</span><span class="keyword">(</span><span class="default">$xi</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else{<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$S</span><span class="keyword">=</span><span class="default">$S</span><span class="keyword">+</span><span class="default">4</span><span class="keyword">*</span><span class="default">simpsonf</span><span class="keyword">(</span><span class="default">$xi</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$i</span><span class="keyword">++;<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; return(</span><span class="default">$h</span><span class="keyword">/</span><span class="default">3</span><span class="keyword">*</span><span class="default">$S</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; else{<br />
&nbsp;&nbsp; &nbsp;&nbsp; return(</span><span class="string">'$n has to be an even number'</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
}<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="59282"></a>
 <div class="note">
  <strong>daniel at g-loc dot org</strong><br />
  <a href="#59282">01-Dec-2005 10:01</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If you're an aviator and needs to calculate windcorrection angles and groundspeed (e.g. during flightplanning) this can be very useful.<br />
<br />
$windcorrection = rad2deg(asin((($windspeed * (sin(deg2rad($tt - ($winddirection-180))))/$tas))));<br />
$groundspeed = $tas*cos(deg2rad($windcorrection)) + $windspeed*cos(deg2rad($tt-($winddirection-180)));<br />
<br />
You can probably write these lines more beautiful, but they work!</span>
</code></div>
  </div>
 </div>
 <a name="58182"></a>
 <div class="note">
  <strong>nbraczek at bsds dot de</strong><br />
  <a href="#58182">26-Oct-2005 02:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Under some circumstances, it is appropriate to round floats to a given number of significant digits. This function will do it for you:<br />
<br />
/**<br />
&nbsp;* Round to significant digits<br />
&nbsp;*<br />
&nbsp;* @param float&nbsp;&nbsp; $f The number to be rounded<br />
&nbsp;* @param integer $n Number of significant digits<br />
&nbsp;*/<br />
function round_significant($f, $n)<br />
{<br />
&nbsp;&nbsp;&nbsp; if ($f==0) return $f;<br />
&nbsp;&nbsp;&nbsp; return round($f, $n-floor(log10(abs($f)))-1);<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="57895"></a>
 <div class="note">
  <strong>monte at ohrt dot com</strong><br />
  <a href="#57895">18-Oct-2005 06:37</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
This is an efficient method of calculating the binomial coefficient C(n,k). This code was derived from Owant: Mastering Algorithms with Perl.<br />
<br />
<span class="default">&lt;?php<br />
&nbsp;&nbsp; </span><span class="comment">// calculate binomial coefficient<br />
&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">binomial_coeff</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">, </span><span class="default">$k</span><span class="keyword">) {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$j </span><span class="keyword">= </span><span class="default">$res </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(</span><span class="default">$k </span><span class="keyword">&lt; </span><span class="default">0 </span><span class="keyword">|| </span><span class="default">$k </span><span class="keyword">&gt; </span><span class="default">$n</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return </span><span class="default">0</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; if((</span><span class="default">$n </span><span class="keyword">- </span><span class="default">$k</span><span class="keyword">) &lt; </span><span class="default">$k</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$k </span><span class="keyword">= </span><span class="default">$n </span><span class="keyword">- </span><span class="default">$k</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; while(</span><span class="default">$j </span><span class="keyword">&lt;= </span><span class="default">$k</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$res </span><span class="keyword">*= </span><span class="default">$n</span><span class="keyword">--;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$res </span><span class="keyword">/= </span><span class="default">$j</span><span class="keyword">++;<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$res</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; }<br />
</span><span class="default">?&gt;<br />
</span><br />
If you compiled php with --enable-bcmath, you can get full integer values of extremely large numbers by replacing:<br />
<br />
$res *= $n--;<br />
$res /= $j++;<br />
<br />
with:<br />
<br />
$res = bcmul($res, $n--);<br />
$res = bcdiv($res, $j++);</span>
</code></div>
  </div>
 </div>
 <a name="55173"></a>
 <div class="note">
  <strong>crescentfreshpot at yahoo dot com</strong><br />
  <a href="#55173">26-Jul-2005 07:50</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Median:<br />
<br />
number median ( number arg1, number arg2 [, number ...] )<br />
<br />
number median ( array numbers )<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">function </span><span class="default">median</span><span class="keyword">()<br />
{<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$args </span><span class="keyword">= </span><span class="default">func_get_args</span><span class="keyword">();<br />
<br />
&nbsp;&nbsp;&nbsp; switch(</span><span class="default">func_num_args</span><span class="keyword">())<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">0</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">trigger_error</span><span class="keyword">(</span><span class="string">'median() requires at least one parameter'</span><span class="keyword">,</span><span class="default">E_USER_WARNING</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">false</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="default">1</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$args </span><span class="keyword">= </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$args</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="comment">// fallthrough<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">default:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$args</span><span class="keyword">)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">trigger_error</span><span class="keyword">(</span><span class="string">'median() requires a list of numbers to operate on or an array of numbers'</span><span class="keyword">,</span><span class="default">E_USER_NOTICE</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">false</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">sort</span><span class="keyword">(</span><span class="default">$args</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$n </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$args</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$h </span><span class="keyword">= </span><span class="default">intval</span><span class="keyword">(</span><span class="default">$n </span><span class="keyword">/ </span><span class="default">2</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$n </span><span class="keyword">% </span><span class="default">2 </span><span class="keyword">== </span><span class="default">0</span><span class="keyword">) { <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$median </span><span class="keyword">= (</span><span class="default">$args</span><span class="keyword">[</span><span class="default">$h</span><span class="keyword">] + </span><span class="default">$args</span><span class="keyword">[</span><span class="default">$h</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">]) / </span><span class="default">2</span><span class="keyword">; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; } else { <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$median </span><span class="keyword">= </span><span class="default">$args</span><span class="keyword">[</span><span class="default">$h</span><span class="keyword">]; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$median</span><span class="keyword">;<br />
}<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="55168"></a>
 <div class="note">
  <strong>bjcffnet at gmail dot com</strong><br />
  <a href="#55168">26-Jul-2005 04:57</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
thearbitcouncil at gmail dot com, you could just use array_sum():<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">average</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)<br />
{<br />
&nbsp;&nbsp; if (!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)) return </span><span class="default">false</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; return </span><span class="default">array_sum</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)/</span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">);<br />
}<br />
<br />
</span><span class="default">$array </span><span class="keyword">= array(</span><span class="default">5</span><span class="keyword">, </span><span class="default">10</span><span class="keyword">, </span><span class="default">15</span><span class="keyword">);<br />
echo </span><span class="default">average</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">); </span><span class="comment">// 10<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="53442"></a>
 <div class="note">
  <strong>graywh at gmail DELETE dot com</strong><br />
  <a href="#53442">01-Jun-2005 12:48</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If you're really concerned about speed, you could compute the factorial of large numbers using the Gamma function of n-1.<br />
<br />
Integral y^(t-1)*Exp(-y) for y from 0 to Infinity<br />
<br />
For Fibonacci numbers, there's a better-than-recursive way.<br />
<br />
((1+sqrt(5))/2)^(n/sqrt(5)) - ((1-sqrt(5))/2)^(n/sqrt(5))</span>
</code></div>
  </div>
 </div>
 <a name="50833"></a>
 <div class="note">
  <strong>eric at woolhiser dot com</strong><br />
  <a href="#50833">10-Mar-2005 08:41</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
For all you guys writing mortgage calculators out there:<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">function </span><span class="default">payment</span><span class="keyword">(</span><span class="default">$apr</span><span class="keyword">,</span><span class="default">$n</span><span class="keyword">,</span><span class="default">$pv</span><span class="keyword">,</span><span class="default">$fv</span><span class="keyword">=</span><span class="default">0.0</span><span class="keyword">,</span><span class="default">$prec</span><span class="keyword">=</span><span class="default">2</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">/* Calculates the monthly payment rouned to the nearest penny<br />
&nbsp;&nbsp;&nbsp; ** $apr = the annual percentage rate of the loan.<br />
&nbsp;&nbsp;&nbsp; ** $n&nbsp;&nbsp; = number of monthly payments (360 for a 30year loan)<br />
&nbsp;&nbsp;&nbsp; ** $pv&nbsp; &nbsp; = present value or principal of the loan<br />
&nbsp;&nbsp;&nbsp; ** $fv&nbsp; = future value of the loan<br />
&nbsp;&nbsp;&nbsp; ** $prec = the precision you wish rounded to<br />
&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; /****************************************\<br />
&nbsp;&nbsp;&nbsp; ** No Warranty is expressed or implied. **<br />
&nbsp;&nbsp;&nbsp; *****************************************/<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if (</span><span class="default">$apr </span><span class="keyword">!=</span><span class="default">0</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$alpha </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">/(</span><span class="default">1</span><span class="keyword">+</span><span class="default">$apr</span><span class="keyword">/</span><span class="default">12</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$retval </span><span class="keyword">=&nbsp; </span><span class="default">round</span><span class="keyword">(</span><span class="default">$pv </span><span class="keyword">* (</span><span class="default">1 </span><span class="keyword">- </span><span class="default">$alpha</span><span class="keyword">) / </span><span class="default">$alpha </span><span class="keyword">/ <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; (</span><span class="default">1 </span><span class="keyword">- </span><span class="default">pow</span><span class="keyword">(</span><span class="default">$alpha</span><span class="keyword">,</span><span class="default">$n</span><span class="keyword">)),</span><span class="default">$prec</span><span class="keyword">) ;<br />
&nbsp;&nbsp;&nbsp; } else {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$retval </span><span class="keyword">= </span><span class="default">round</span><span class="keyword">(</span><span class="default">$pv </span><span class="keyword">/ </span><span class="default">$n</span><span class="keyword">, </span><span class="default">$prec</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; return(</span><span class="default">$retval</span><span class="keyword">);<br />
<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="50149"></a>
 <div class="note">
  <strong>tmpa at yahoo dot com</strong><br />
  <a href="#50149">19-Feb-2005 12:42</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
while joogat's one line function is short, it is probably better to calculate factorial iteratively instead of recursively. keep in mind if you want large factorials, you'll need to use some sort of arbitrary precision integer or perhaps the BCMath functions. then again, unless you're trying to do large numbers (170! is the highest that you can do that does not return infinity) you probably won't notice any time difference.<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">factorial</span><span class="keyword">(</span><span class="default">$in</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// 0! = 1! = 1<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$out </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// Only if $in is &gt;= 2<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">for (</span><span class="default">$i </span><span class="keyword">= </span><span class="default">2</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&lt;= </span><span class="default">$in</span><span class="keyword">; </span><span class="default">$i</span><span class="keyword">++) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$out </span><span class="keyword">*= </span><span class="default">$i</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$out</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="48783"></a>
 <div class="note">
  <strong>thearbitcouncil at gmail dot com</strong><br />
  <a href="#48783">06-Jan-2005 02:32</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Two functions I didn't find elsewhere... one to compute mean of an array of numbers, and another to computer variance of a sample of numbers. Both take an array of numbers as arguments. Not much error checking, or optimization...<br />
<br />
(note: variance function uses the average function...)<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">function </span><span class="default">average</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)<br />
{<br />
&nbsp;&nbsp;&nbsp; if (!</span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)) return </span><span class="default">0</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$sum </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; for (</span><span class="default">$i </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&lt; </span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">); </span><span class="default">$i</span><span class="keyword">++)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$sum </span><span class="keyword">+= </span><span class="default">$arr</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$sum </span><span class="keyword">/ </span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">);<br />
}<br />
<br />
function </span><span class="default">variance</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)<br />
{<br />
&nbsp;&nbsp;&nbsp; if (!</span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)) return </span><span class="default">0</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$mean </span><span class="keyword">= </span><span class="default">average</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$sos </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">;&nbsp; &nbsp; </span><span class="comment">// Sum of squares<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">for (</span><span class="default">$i </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&lt; </span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">); </span><span class="default">$i</span><span class="keyword">++)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$sos </span><span class="keyword">+= (</span><span class="default">$arr</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">] - </span><span class="default">$mean</span><span class="keyword">) * (</span><span class="default">$arr</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">] - </span><span class="default">$mean</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$sos </span><span class="keyword">/ (</span><span class="default">count</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">);&nbsp; </span><span class="comment">// denominator = n-1; i.e. estimating based on sample <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // n-1 is also what MS Excel takes by default in the<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // VAR function<br />
</span><span class="keyword">}<br />
<br />
echo </span><span class="default">variance</span><span class="keyword">(array(</span><span class="default">4</span><span class="keyword">,</span><span class="default">6</span><span class="keyword">,</span><span class="default">23</span><span class="keyword">,</span><span class="default">15</span><span class="keyword">,</span><span class="default">18</span><span class="keyword">)); </span><span class="comment">// echoes 64.7...correct value :)<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="47469"></a>
 <div class="note">
  <strong>info at gavinvincent dot co dot uk</strong><br />
  <a href="#47469">17-Nov-2004 04:34</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If you need to deal with polar co-ordinates for somereason you will need to convert to and from x,y for input and output in most situations: here are some functions to convert cartesian to polar and polar to cartesian<br />
&lt;?<br />
//returns array of r, theta in the range of 0-2*pi (in radians)<br />
function rect2polar($x,$y)<br />
{<br />
&nbsp;&nbsp; &nbsp; if(is_numeric($x)&amp;&amp;is_numeric($y))<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $r=sqrt(pow($x,2)+pow($y,2));<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($x==0)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($y&gt;0) $theta=pi()/2;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; else $theta=3*pi()/2;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else if($x&lt;0) $theta=atan($y/$x)+pi();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else if($y&lt;0) $theta=atan($y/$x)+2*pi();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else $theta=atan($y/$x);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $polar=array("r"=&gt;$r,"theta"=&gt;$theta);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return $polar;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; else return false;<br />
}<br />
<br />
//r must be in radians, returns array of x,y<br />
function polar2rect($r,$theta)<br />
{<br />
&nbsp;if(is_numeric($r)&amp;&amp;is_numeric($theta))<br />
&nbsp;{<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $x=$r*cos($theta);<br />
&nbsp;&nbsp;&nbsp; $y=$r*sin($theta);<br />
&nbsp;&nbsp;&nbsp; $rect=array("x"=&gt;$x,"y"=&gt;$y);<br />
&nbsp;}<br />
&nbsp;else<br />
&nbsp;{<br />
&nbsp;&nbsp; return false;<br />
&nbsp;}<br />
}<br />
?&gt;</span>
</code></div>
  </div>
 </div>
 <a name="45985"></a>
 <div class="note">
  <strong>help at gjbdesign dot com</strong><br />
  <a href="#45985">25-Sep-2004 09:05</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Occasionally a user must enter a number in a form. This function converts fractions to decimals and leaves decimals untouched. Of course, you may wish to round the final output, but that is not included here.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="comment">/*Some example values of $q<br />
$q = "2.5";<br />
$q = "2 1/2";<br />
$q = "5/2";<br />
*/<br />
</span><span class="keyword">function </span><span class="default">Deci_Con</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">){<br />
</span><span class="comment">//check for a space, signifying a whole number with a fraction<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if(</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">, </span><span class="string">' '</span><span class="keyword">)){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$wa </span><span class="keyword">= </span><span class="default">strrev</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$wb </span><span class="keyword">= </span><span class="default">strrev</span><span class="keyword">(</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$wa</span><span class="keyword">, </span><span class="string">' '</span><span class="keyword">));<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$whole </span><span class="keyword">= </span><span class="default">true</span><span class="keyword">;</span><span class="comment">//this is a whole number<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">}<br />
</span><span class="comment">//now check the fraction part<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if(</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">, </span><span class="string">'/'</span><span class="keyword">)){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$whole</span><span class="keyword">==</span><span class="default">true</span><span class="keyword">){</span><span class="comment">//if whole number, then remove the whole number and space from the calculations<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$q </span><span class="keyword">= </span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">, </span><span class="string">' '</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
</span><span class="default">$b </span><span class="keyword">= </span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">"/"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">, </span><span class="string">'/'</span><span class="keyword">));</span><span class="comment">//this is the divisor<br />
//isolate the numerator<br />
</span><span class="default">$c </span><span class="keyword">= </span><span class="default">strrev</span><span class="keyword">(</span><span class="default">$q</span><span class="keyword">);<br />
</span><span class="default">$d </span><span class="keyword">= </span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$c</span><span class="keyword">, </span><span class="string">'/'</span><span class="keyword">);<br />
</span><span class="default">$e </span><span class="keyword">= </span><span class="default">strrev</span><span class="keyword">(</span><span class="default">$d</span><span class="keyword">);<br />
</span><span class="default">$a </span><span class="keyword">= </span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">"/"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$e</span><span class="keyword">);</span><span class="comment">//the pre-final numerator<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">if(</span><span class="default">$whole</span><span class="keyword">==</span><span class="default">true</span><span class="keyword">){</span><span class="comment">//add the whole number to the calculations<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$a </span><span class="keyword">= </span><span class="default">$a</span><span class="keyword">+(</span><span class="default">$wb</span><span class="keyword">*</span><span class="default">$b</span><span class="keyword">);</span><span class="comment">//new numerator is whole number multiplied by denominator plus original numerator&nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">}<br />
</span><span class="default">$q </span><span class="keyword">= </span><span class="default">$a</span><span class="keyword">/</span><span class="default">$b</span><span class="keyword">;</span><span class="comment">//this is now your decimal<br />
</span><span class="keyword">return </span><span class="default">$q</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }else{<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$q</span><span class="keyword">;</span><span class="comment">//not a fraction, just return the decimal<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">}<br />
}</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="45727"></a>
 <div class="note">
  <strong>donnieb819 at hotmail dot NOSPAM dot com</strong><br />
  <a href="#45727">16-Sep-2004 05:58</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Method to convert an arbitrary decimal number to its most reduced fraction form (so a string is returned, this method would probably be used for output formatting purposes.)&nbsp; There were other methods similar to this one on the page, but none did quite what I wanted.&nbsp; It's maybe not the most elegant code, but it gets the job done.&nbsp; Hope this helps someone.&nbsp; An iterative form of Euclid's algorithm is used to find the GCD.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">dec2frac</span><span class="keyword">( </span><span class="default">$decimal </span><span class="keyword">)<br />
{<br />
&nbsp; </span><span class="default">$decimal </span><span class="keyword">= (string)</span><span class="default">$decimal</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$num </span><span class="keyword">= </span><span class="string">''</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$den </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$dec </span><span class="keyword">= </span><span class="default">false</span><span class="keyword">;<br />
&nbsp; <br />
&nbsp; </span><span class="comment">// find least reduced fractional form of number<br />
&nbsp; </span><span class="keyword">for( </span><span class="default">$i </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">, </span><span class="default">$ix </span><span class="keyword">= </span><span class="default">strlen</span><span class="keyword">( </span><span class="default">$decimal </span><span class="keyword">); </span><span class="default">$i </span><span class="keyword">&lt; </span><span class="default">$ix</span><span class="keyword">; </span><span class="default">$i</span><span class="keyword">++ )<br />
&nbsp; {<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// build the denominator as we 'shift' the decimal to the right<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if( </span><span class="default">$dec </span><span class="keyword">) </span><span class="default">$den </span><span class="keyword">*= </span><span class="default">10</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// find the decimal place/ build the numberator<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if( </span><span class="default">$decimal</span><span class="keyword">{</span><span class="default">$i</span><span class="keyword">} == </span><span class="string">'.' </span><span class="keyword">) </span><span class="default">$dec </span><span class="keyword">= </span><span class="default">true</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; else </span><span class="default">$num </span><span class="keyword">.= </span><span class="default">$decimal</span><span class="keyword">{</span><span class="default">$i</span><span class="keyword">};<br />
&nbsp; }<br />
&nbsp; </span><span class="default">$num </span><span class="keyword">= (int)</span><span class="default">$num</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp; </span><span class="comment">// whole number, just return it<br />
&nbsp; </span><span class="keyword">if( </span><span class="default">$den </span><span class="keyword">== </span><span class="default">1 </span><span class="keyword">) return </span><span class="default">$num</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp; </span><span class="default">$num2 </span><span class="keyword">= </span><span class="default">$num</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$den2 </span><span class="keyword">= </span><span class="default">$den</span><span class="keyword">;<br />
&nbsp; </span><span class="default">$rem&nbsp; </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp; </span><span class="comment">// Euclid's Algorithm (to find the gcd)<br />
&nbsp; </span><span class="keyword">while( </span><span class="default">$num2 </span><span class="keyword">% </span><span class="default">$den2 </span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$rem </span><span class="keyword">= </span><span class="default">$num2 </span><span class="keyword">% </span><span class="default">$den2</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$num2 </span><span class="keyword">= </span><span class="default">$den2</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$den2 </span><span class="keyword">= </span><span class="default">$rem</span><span class="keyword">;<br />
&nbsp; }<br />
&nbsp; if( </span><span class="default">$den2 </span><span class="keyword">!= </span><span class="default">$den </span><span class="keyword">) </span><span class="default">$rem </span><span class="keyword">= </span><span class="default">$den2</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp; </span><span class="comment">// now $rem holds the gcd of the numerator and denominator of our fraction<br />
&nbsp; </span><span class="keyword">return (</span><span class="default">$num </span><span class="keyword">/ </span><span class="default">$rem </span><span class="keyword">) . </span><span class="string">"/" </span><span class="keyword">. (</span><span class="default">$den </span><span class="keyword">/ </span><span class="default">$rem</span><span class="keyword">);<br />
}<br />
</span><span class="default">?&gt;<br />
</span><br />
Examples:<br />
echo dec2frac( 10 );<br />
echo dec2frac( .5 );<br />
echo dec2frac( 5.25 );<br />
echo dec2frac( .333333333 );<br />
<br />
yields:<br />
10<br />
1/2<br />
21/4<br />
333333333/1000000000</span>
</code></div>
  </div>
 </div>
 <a name="43073"></a>
 <div class="note">
  <strong>pat.mat AT sympatico DOT com</strong><br />
  <a href="#43073">08-Jun-2004 07:36</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
For people interest in Differential Equations, I've done a function that receive a string like: x^2+x^3 and put it in<br />
2x+3x^2 witch is the differantial of the previous equation.<br />
<br />
In the code there is one thing missing: the $string{$i} is often going outOfBound (Uninitialized string offset: 6 in...)<br />
if your error setting is set a little too high... I just dont know how to fix this.<br />
<br />
So there is the code for differential equation with (+ and -) only:<br />
<br />
&lt;?<br />
function differentiel($equa)<br />
{<br />
&nbsp;&nbsp;&nbsp; $equa = strtolower($equa);<br />
&nbsp;&nbsp;&nbsp; echo "Equation de depart: ".$equa."&lt;br&gt;";<br />
&nbsp;&nbsp;&nbsp; $final = ""; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; for($i = 0; $i &lt; strlen($equa); $i++)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; //Make a new string from the receive $equa<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($equa{$i} == "x" &amp;&amp; $equa{$i+1} == "^")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i+2};<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= "x^";<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i+2}-1;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif($equa{$i} == "+" || $equa{$i} == "-")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i};<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif(is_numeric($equa{$i}) &amp;&amp; $i == 0)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; //gerer parenthese et autre terme generaux + gerer ^apres: 2^2<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i}."*";<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif(is_numeric($equa{$i}) &amp;&amp; $i &gt; 0 &amp;&amp; $equa{$i-1} != "^")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; //gerer ^apres: 2^2<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i}."*";<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif($equa{$i} == "^")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif(is_numeric($equa{$i}) &amp;&amp; $equa{$i-1} == "^")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if($equa{$i} == "x")<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= 1;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $final .= $equa{$i}; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; //<br />
&nbsp;&nbsp;&nbsp; //Manage multiplication add in the previous string $final<br />
&nbsp;&nbsp;&nbsp; //<br />
&nbsp;&nbsp;&nbsp; $finalMul = "";<br />
&nbsp;&nbsp;&nbsp; for($i = 0; $i &lt; strlen($final); $i++)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(is_numeric($final{$i}) &amp;&amp; $final{$i+1} == "*" &amp;&amp; is_numeric($final{$i+2}))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $finalMul .= $final{$i}*$final{$i+2};<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif($final{$i} == "*")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif(is_numeric($final{$i}) &amp;&amp; $final{$i+1} != "*" &amp;&amp; $final{$i-1} == "*")<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $finalMul .= $final{$i};&nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; echo "equa final: ".$finalMul;<br />
}<br />
?&gt;<br />
<br />
I know this is not optimal but i've done this quick :)<br />
If you guys have any comment just email me.<br />
I also want to do this fonction In C to add to phpCore maybe soon...<br />
Patoff</span>
</code></div>
  </div>
 </div>
 <a name="42714"></a>
 <div class="note">
  <strong>moc.erawtfostym@evad</strong><br />
  <a href="#42714">26-May-2004 07:04</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The fastest O(1) factorial function has a lookup table of all the factorials that fit within the output range. With an array of the first 34 (float) or 170 (double) factorials, you get identical results in a fraction of the time.</span>
</code></div>
  </div>
 </div>
 <a name="42673"></a>
 <div class="note">
  <strong>churkl at hotmail dot com</strong><br />
  <a href="#42673">26-May-2004 01:32</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is my factorial function which i think is very simple and without any confusion. email me comments if you like if i had something wrong.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">factorial</span><span class="keyword">(</span><span class="default">$number</span><span class="keyword">)<br />
{<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$temp </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; while (</span><span class="default">$number </span><span class="keyword">&gt; </span><span class="default">1</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$temp </span><span class="keyword">*= </span><span class="default">$number</span><span class="keyword">--;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$temp</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="42048"></a>
 <div class="note">
  <strong>ausvald at tut dot by</strong><br />
  <a href="#42048">30-Apr-2004 05:48</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I see there are some factorial functions below.<br />
<br />
I'll provide the best one:<br />
<br />
&lt;?<br />
function factorial($n){ $n=(int)$n;<br />
&nbsp; $f=1;<br />
&nbsp; for(;$n&gt;0;--$n) $f*=$n;<br />
&nbsp; return $f;<br />
}<br />
?&gt;</span>
</code></div>
  </div>
 </div>
 <a name="42003"></a>
 <div class="note">
  <strong>florian at shellfire dot de</strong><br />
  <a href="#42003">28-Apr-2004 02:48</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Please note that shorter is not always better<br />
(meaning that really short faculty implementation above).<br />
<br />
In my opinion, a clearer way to code this is, including a check<br />
for negative or non-integer values.<br />
<br />
In order to calculate the faculty of a positive integer,<br />
an iterative way (which might be harder to understand)<br />
is usually a bit faster, but I am using it only for small<br />
values so it is not really important to me:<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// Calculate the Faculty of a positive int-value<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">iFaculty</span><span class="keyword">(</span><span class="default">$a_iFac</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp;&nbsp; if (</span><span class="default">$a_iFac </span><span class="keyword">&gt; </span><span class="default">0</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; { <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$a_iFac </span><span class="keyword">* </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">iFaculty</span><span class="keyword">(</span><span class="default">$a_iFac </span><span class="keyword">- </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; elseif (</span><span class="default">$a_iFac </span><span class="keyword">== </span><span class="default">0</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; { <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">0</span><span class="keyword">;&nbsp; </span><span class="comment">// Wrong argument!<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="keyword">}<br />
&nbsp;&nbsp;&nbsp; } <br />
</span><span class="default">?&gt;<br />
</span><br />
I've also written another function to calculate the<br />
binomial coefficient of 2 values, I didn't find it anywhere yet so I hope it might help someone (works fine with the above stated faculty-function and ready to be used inside of your own classes!)<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">// calculates the binomial coefficient "n over k" of 2 positive int values<br />
&nbsp;&nbsp;&nbsp; // for n &gt;= k<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">iBinCoeff</span><span class="keyword">(</span><span class="default">$a_iN</span><span class="keyword">, </span><span class="default">$a_iK</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="comment">// the binomial coefficient is defined as n! / [ (n-k)! * k! ]<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">return </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">iFaculty</span><span class="keyword">(</span><span class="default">$a_iN</span><span class="keyword">) / (</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">iFaculty</span><span class="keyword">(</span><span class="default">$a_iN </span><span class="keyword">- </span><span class="default">$a_iK</span><span class="keyword">) * </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">iFaculty</span><span class="keyword">(</span><span class="default">$a_iK</span><span class="keyword">));&nbsp; &nbsp; <br />
&nbsp;&nbsp;&nbsp; } <br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="38970"></a>
 <div class="note">
  <strong>Chronial &quot;at&quot; cyberpunkuniverse.de</strong><br />
  <a href="#38970">13-Jan-2004 01:47</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here are are a nPr and a nPc function<br />
(had to define NaN - don't know, how to this the "rigth" way)<br />
<br />
<span class="default">&lt;?php<br />
define </span><span class="keyword">(</span><span class="default">NaN</span><span class="keyword">,</span><span class="default">acos</span><span class="keyword">(</span><span class="default">1.01</span><span class="keyword">));<br />
<br />
function </span><span class="default">nCr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">,</span><span class="default">$r</span><span class="keyword">){<br />
&nbsp;&nbsp; if (</span><span class="default">$r </span><span class="keyword">&gt; </span><span class="default">$n</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">NaN</span><span class="keyword">;<br />
&nbsp;&nbsp; if ((</span><span class="default">$n</span><span class="keyword">-</span><span class="default">$r</span><span class="keyword">) &lt; </span><span class="default">$r</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">nCr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">,(</span><span class="default">$n</span><span class="keyword">-</span><span class="default">$r</span><span class="keyword">));<br />
&nbsp;&nbsp; </span><span class="default">$return </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; for (</span><span class="default">$i</span><span class="keyword">=</span><span class="default">0</span><span class="keyword">;</span><span class="default">$i </span><span class="keyword">&lt; </span><span class="default">$r</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++){<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$return </span><span class="keyword">*= (</span><span class="default">$n</span><span class="keyword">-</span><span class="default">$i</span><span class="keyword">)/(</span><span class="default">$i</span><span class="keyword">+</span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
&nbsp;&nbsp; return </span><span class="default">$return</span><span class="keyword">;<br />
}<br />
<br />
function </span><span class="default">nPr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">,</span><span class="default">$r</span><span class="keyword">){<br />
&nbsp;&nbsp; if (</span><span class="default">$r </span><span class="keyword">&gt; </span><span class="default">$n</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">NaN</span><span class="keyword">;<br />
&nbsp;&nbsp; if (</span><span class="default">$r</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">$n</span><span class="keyword">*(</span><span class="default">nPr</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">,</span><span class="default">$r</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">));<br />
&nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">1</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="36365"></a>
 <div class="note">
  <strong>chris at free-source dot com</strong><br />
  <a href="#36365">07-Oct-2003 09:37</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
to "convert" scientific notation to a float simply cast it:<br />
<span class="default">&lt;?php<br />
$val </span><span class="keyword">= </span><span class="string">'3.5e4'</span><span class="keyword">;<br />
</span><span class="default">$val </span><span class="keyword">= (float) </span><span class="default">$val</span><span class="keyword">;<br />
echo </span><span class="default">$val</span><span class="keyword">;<br />
</span><span class="default">?&gt;<br />
</span><br />
output:<br />
35000</span>
</code></div>
  </div>
 </div>
 <a name="36321"></a>
 <div class="note">
  <strong>jl85 at yahoo dot com</strong><br />
  <a href="#36321">05-Oct-2003 04:00</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here's yet another greatest common denominator (gcd) function, a reeeeally small one.<br />
<br />
function gcd($n,$m){<br />
if(!$m)return$n;return gcd($m,$n%$m);<br />
}<br />
<br />
It works by recursion. Not really sure about it's speed, but it's really small! This won't work on floating point numbers accurately though. If you want a floating point one, you need to have at least PHP 4, and the code would be<br />
<br />
function gcd($n,$m){<br />
if(!$m)return$n;return gcd($m,fmod($n,$m));<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="36201"></a>
 <div class="note">
  <strong>fabien_mornand at yahoo dot fr</strong><br />
  <a href="#36201">30-Sep-2003 03:46</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
here is an algorithm to calculate gcd of a number. This is Euclid algorithm i was studying in Maths. I've converted it in php for the fun.<br />
<br />
<span class="default">&lt;?php<br />
&nbsp;</span><span class="keyword">if(</span><span class="default">$a </span><span class="keyword">&amp;&amp; </span><span class="default">$b</span><span class="keyword">)<br />
&nbsp; { </span><span class="default">$ax</span><span class="keyword">=</span><span class="default">$a</span><span class="keyword">; </span><span class="default">$bx</span><span class="keyword">=</span><span class="default">$b</span><span class="keyword">;<br />
&nbsp;&nbsp; </span><span class="default">$r</span><span class="keyword">=</span><span class="default">fmod</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">,</span><span class="default">$b</span><span class="keyword">);<br />
&nbsp; if(!</span><span class="default">$r</span><span class="keyword">){</span><span class="default">$rx</span><span class="keyword">=</span><span class="default">$r</span><span class="keyword">;}<br />
&nbsp;&nbsp; while(</span><span class="default">$r</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$rx</span><span class="keyword">=</span><span class="default">$r</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$a</span><span class="keyword">=</span><span class="default">$b</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$b</span><span class="keyword">=</span><span class="default">$r</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$r</span><span class="keyword">=</span><span class="default">fmod</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">,</span><span class="default">$b</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp; }<br />
echo </span><span class="string">'PGCD ('</span><span class="keyword">.</span><span class="default">$ax</span><span class="keyword">.</span><span class="string">' , '</span><span class="keyword">.</span><span class="default">$bx</span><span class="keyword">.</span><span class="string">' ) = '</span><span class="keyword">.</span><span class="default">$rx</span><span class="keyword">;<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="35318"></a>
 <div class="note">
  <strong>jordanolsommer at imap dot cc</strong><br />
  <a href="#35318">27-Aug-2003 08:07</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The reason the bitwise AND ("&amp;") operator works to determine whether a number is odd or even is because odd numbers expressed in binary always have the rightmost (2^0) bit = 1 and even numbers always have the 2^0 bit = 0. <br />
<br />
So if you do a " 1 &amp; $num", it will return zero if the number is even (since xxxxxxx0 [the even number in binary] and 00000001 [the 1]) don't share any bits, and will return 1 if the number is odd (xxxxxx1 and 000001).<br />
<br />
a clever way of doing things, but $num % 2 would work as well i think :).</span>
</code></div>
  </div>
 </div>
 <a name="31520"></a>
 <div class="note">
  <strong>matthew_gaddis at yahoo dot com</strong><br />
  <a href="#31520">24-Apr-2003 02:23</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is a cleaner factorial function:<br />
<br />
function factorial($s){<br />
&nbsp;&nbsp;&nbsp; if($s) $r = $s * factorial($s - 1);<br />
&nbsp;&nbsp;&nbsp; else $r = 1;<br />
&nbsp;&nbsp;&nbsp; return $r;<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="31295"></a>
 <div class="note">
  <strong>jerry dot wilborn at fast dot net</strong><br />
  <a href="#31295">16-Apr-2003 11:10</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is how to calculate standard deviation in PHP where $samples is an array of incrementing numeric keys and the values are your samples:<br />
<br />
$sample_count = count($samples);<br />
<br />
for ($current_sample = 0; $sample_count &gt; $current_sample; ++$current_sample) $sample_square[$current_sample] = pow($samples[$current_sample], 2);<br />
<br />
$standard_deviation = sqrt(array_sum($sample_square) / $sample_count - pow((array_sum($samples) / $sample_count), 2));</span>
</code></div>
  </div>
 </div>
 <a name="29709"></a>
 <div class="note">
  <strong>jl85 at yahoo dot com</strong><br />
  <a href="#29709">22-Feb-2003 08:04</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Theres another faster way of doing even/odd number checking by using bitwise operators. Don't ask me how it works, I just found this out by experimenting with it (could the editor possibly explain?)<br />
<br />
if ((1&amp;$num)) {<br />
&nbsp;echo "$num is odd";<br />
}<br />
<br />
if (!(1&amp;$num)) {<br />
&nbsp;echo "$num is even";<br />
}<br />
<br />
How it works is (1&amp;$num) returns a 1 for odd numbers and returns 0 when it's an even number.</span>
</code></div>
  </div>
 </div>
 <a name="29071"></a>
 <div class="note">
  <strong>php at casaforge dot com (Hal)</strong><br />
  <a href="#29071">31-Jan-2003 05:25</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
This might be useful in generating fractional numbers for construction, if only because most carpenters would rather put a nail in your foot than hear about any number that ends with .8125".<br />
<br />
Since I couldn't figure out the fraction code above, this is my simple-minded take on the problem. Also, align by "char" doesn't seem to work yet in html, so it seems necessary to use tables (egad!) to make numbers align properly. The following code illustrates a way to make a dynamically sized table with aligned fractions from an array of random numbers. Since I don't care about fractions less than 1/16, this rounds them into oblivion. Also, it sorts the list from long to short and collates multiples in the array. One bit of cleverness here (gleaned from these pages) that might not be obvious: I'm using 1 *bitwise and* (1 &amp;) to determine odd numbers.<br />
<br />
If you copy and paste the following code, try refreshing the page a few times to see how the table adjusts itself.<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="comment">// get some numbers to play with<br />
<br />
</span><span class="default">$x </span><span class="keyword">= </span><span class="default">rand</span><span class="keyword">(</span><span class="default">0</span><span class="keyword">,</span><span class="default">130000</span><span class="keyword">)/</span><span class="default">10</span><span class="keyword">;<br />
</span><span class="default">$y </span><span class="keyword">= </span><span class="default">rand</span><span class="keyword">(</span><span class="default">0</span><span class="keyword">,</span><span class="default">1200</span><span class="keyword">);<br />
</span><span class="default">$z </span><span class="keyword">= </span><span class="default">rand</span><span class="keyword">(</span><span class="default">0</span><span class="keyword">,</span><span class="default">4</span><span class="keyword">)/</span><span class="default">64</span><span class="keyword">;<br />
</span><span class="default">$array </span><span class="keyword">= array(</span><span class="default">$x</span><span class="keyword">, </span><span class="default">$x</span><span class="keyword">, </span><span class="default">$x</span><span class="keyword">, </span><span class="default">$y</span><span class="keyword">, </span><span class="default">$y</span><span class="keyword">, </span><span class="default">$z</span><span class="keyword">, </span><span class="default">324.19</span><span class="keyword">, </span><span class="default">425</span><span class="keyword">/</span><span class="default">7</span><span class="keyword">, </span><span class="default">sqrt</span><span class="keyword">(</span><span class="default">2</span><span class="keyword">), </span><span class="default">pi</span><span class="keyword">(), </span><span class="default">pi</span><span class="keyword">());<br />
<br />
</span><span class="comment">// functions<br />
<br />
</span><span class="keyword">function </span><span class="default">mult</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">) { return </span><span class="default">intval </span><span class="keyword">(</span><span class="default">round </span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">*</span><span class="default">16</span><span class="keyword">)); }<br />
<br />
function </span><span class="default">frac</span><span class="keyword">(</span><span class="default">$num</span><span class="keyword">) { </span><span class="default">$mod </span><span class="keyword">= </span><span class="default">fmod </span><span class="keyword">(</span><span class="default">$num</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">)*</span><span class="default">16</span><span class="keyword">; <br />
if (</span><span class="default">1 </span><span class="keyword">&amp; </span><span class="default">$mod</span><span class="keyword">) { return </span><span class="string">" - "</span><span class="keyword">.</span><span class="default">$mod</span><span class="keyword">.</span><span class="string">"/16"</span><span class="keyword">; } <br />
else </span><span class="default">$mod </span><span class="keyword">= </span><span class="default">$mod</span><span class="keyword">/</span><span class="default">2</span><span class="keyword">;<br />
if (</span><span class="default">1 </span><span class="keyword">&amp; </span><span class="default">$mod</span><span class="keyword">) { return </span><span class="string">" - "</span><span class="keyword">.</span><span class="default">$mod</span><span class="keyword">.</span><span class="string">"/8"</span><span class="keyword">; }<br />
else </span><span class="default">$mod </span><span class="keyword">= </span><span class="default">$mod</span><span class="keyword">/</span><span class="default">2</span><span class="keyword">;<br />
if (</span><span class="default">1 </span><span class="keyword">&amp; </span><span class="default">$mod</span><span class="keyword">) { return </span><span class="string">" - "</span><span class="keyword">.</span><span class="default">$mod</span><span class="keyword">.</span><span class="string">"/4"</span><span class="keyword">; }<br />
else </span><span class="default">$mod </span><span class="keyword">= </span><span class="default">$mod</span><span class="keyword">/</span><span class="default">2</span><span class="keyword">;<br />
if (</span><span class="default">1 </span><span class="keyword">&amp; </span><span class="default">$mod</span><span class="keyword">) {return </span><span class="string">" - "</span><span class="keyword">.</span><span class="default">$mod</span><span class="keyword">.</span><span class="string">"/2"</span><span class="keyword">;}<br />
}<br />
<br />
</span><span class="comment">// make a table<br />
<br />
</span><span class="keyword">echo </span><span class="string">'&lt;table&gt;'</span><span class="keyword">;<br />
</span><span class="default">$array </span><span class="keyword">= </span><span class="default">array_map</span><span class="keyword">(</span><span class="string">"mult"</span><span class="keyword">, </span><span class="default">$array</span><span class="keyword">);<br />
</span><span class="default">$array </span><span class="keyword">= (</span><span class="default">array_filter</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">, </span><span class="default">strval</span><span class="keyword">)); </span><span class="comment">//get rid of zeros<br />
</span><span class="default">$array </span><span class="keyword">= (</span><span class="default">array_count_values </span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">));<br />
</span><span class="default">krsort </span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">);<br />
while (list (</span><span class="default">$key</span><span class="keyword">, </span><span class="default">$val</span><span class="keyword">) = </span><span class="default">each </span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">)) {<br />
</span><span class="default">$key </span><span class="keyword">= </span><span class="default">$key</span><span class="keyword">/</span><span class="default">16</span><span class="keyword">;<br />
echo </span><span class="string">"&lt;tr&gt;&lt;td&gt;$val&lt;/td&gt;&lt;td&gt;&amp;nbsp; @ &amp;nbsp;&lt;/td&gt;&lt;td align=\"right\"&gt;"</span><span class="keyword">.</span><span class="default">intval</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">).</span><span class="string">" &lt;/td&gt;&lt;td&gt; "</span><span class="keyword">.</span><span class="default">frac</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">).</span><span class="string">" &lt;/td&gt;&lt;/tr&gt;"</span><span class="keyword">;<br />
}<br />
echo </span><span class="string">'&lt;/table&gt;'</span><span class="keyword">;<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="27498"></a>
 <div class="note">
  <strong>nazgul26 (at_sign) windfox dot net</strong><br />
  <a href="#27498">08-Dec-2002 02:58</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
This code will convert a decimal to it's fraction equivalent. The precision can be set by changing PRECISION.<br />
<br />
<span class="default">&lt;?php<br />
define</span><span class="keyword">(</span><span class="default">PRECISION</span><span class="keyword">, </span><span class="default">.01</span><span class="keyword">);<br />
<br />
</span><span class="default">$count</span><span class="keyword">=</span><span class="default">0</span><span class="keyword">;<br />
</span><span class="default">$result</span><span class="keyword">=array();<br />
</span><span class="default">decimalToFraction</span><span class="keyword">(</span><span class="default">$_REQUEST</span><span class="keyword">[</span><span class="string">'dec'</span><span class="keyword">],</span><span class="default">$count</span><span class="keyword">,&amp;</span><span class="default">$result</span><span class="keyword">);<br />
</span><span class="default">$count </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$result</span><span class="keyword">);<br />
</span><span class="default">$simp_fract </span><span class="keyword">= </span><span class="default">simplifyFraction</span><span class="keyword">(</span><span class="default">$result</span><span class="keyword">,</span><span class="default">$count</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="default">$result</span><span class="keyword">[</span><span class="default">$count</span><span class="keyword">]);<br />
<br />
echo </span><span class="default">$simpl_fract</span><span class="keyword">;<br />
<br />
</span><span class="comment">// Start of functions<br />
<br />
/*<br />
&nbsp;&nbsp; Converts a decimal to unsimplified fraction represented in an array<br />
*/<br />
</span><span class="keyword">function </span><span class="default">decimalToFraction</span><span class="keyword">(</span><span class="default">$decimal</span><span class="keyword">,</span><span class="default">$count</span><span class="keyword">,</span><span class="default">$result</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$a </span><span class="keyword">= (</span><span class="default">1</span><span class="keyword">/</span><span class="default">$decimal</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$b </span><span class="keyword">= ( </span><span class="default">$a </span><span class="keyword">- </span><span class="default">floor</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">)&nbsp; );<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$count</span><span class="keyword">++;<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">$b </span><span class="keyword">&gt; </span><span class="default">.01 </span><span class="keyword">&amp;&amp; </span><span class="default">$count </span><span class="keyword">&lt;= </span><span class="default">5</span><span class="keyword">) </span><span class="default">decimalToFraction</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">,</span><span class="default">$count</span><span class="keyword">,&amp;</span><span class="default">$result</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">[</span><span class="default">$count</span><span class="keyword">] = </span><span class="default">floor</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">);<br />
}<br />
<br />
</span><span class="comment">/* <br />
&nbsp;&nbsp;&nbsp; Simplifies a fraction in an array form that is returned from&nbsp; <br />
&nbsp;&nbsp;&nbsp; decimalToFraction<br />
*/<br />
</span><span class="keyword">function </span><span class="default">simplifyFraction</span><span class="keyword">(</span><span class="default">$fraction</span><span class="keyword">,</span><span class="default">$count</span><span class="keyword">,</span><span class="default">$top</span><span class="keyword">,</span><span class="default">$bottom</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$next </span><span class="keyword">= </span><span class="default">$fraction</span><span class="keyword">[</span><span class="default">$count</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$a </span><span class="keyword">= (</span><span class="default">$bottom </span><span class="keyword">* </span><span class="default">$next</span><span class="keyword">) + </span><span class="default">$top</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$top </span><span class="keyword">= </span><span class="default">$bottom</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$bottom </span><span class="keyword">= </span><span class="default">$a</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$count</span><span class="keyword">--;<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">$count </span><span class="keyword">&gt; </span><span class="default">0</span><span class="keyword">) </span><span class="default">simplifyFraction</span><span class="keyword">(</span><span class="default">$fraction</span><span class="keyword">,</span><span class="default">$count</span><span class="keyword">,</span><span class="default">$top</span><span class="keyword">,</span><span class="default">$bottom</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; else {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="string">"&lt;font size=1&gt;$bottom/$top&lt;/font&gt;"</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="26701"></a>
 <div class="note">
  <strong>jbeardsl at gte dot net</strong><br />
  <a href="#26701">09-Nov-2002 10:36</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I needed a truncate function to operate on real numbers. I preferred not to use a string-manipulation method, so here's my solution. HTH...<br />
<br />
function truncate ($num, $digits = 0) {<br />
<br />
&nbsp;&nbsp;&nbsp; //provide the real number, and the number of <br />
&nbsp;&nbsp;&nbsp; //digits right of the decimal you want to keep.<br />
<br />
&nbsp;&nbsp;&nbsp; $shift = pow(10 , $digits);<br />
&nbsp;&nbsp;&nbsp; return ((floor($num * $shift)) / $shift);<br />
<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="26680"></a>
 <div class="note">
  <strong>jbeardsl [found_at] gte [d0t] net</strong><br />
  <a href="#26680">08-Nov-2002 01:15</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I was looking for a truncate function. Not finding one, I wrote my own. Since it deals with everything as a number, I imagine it's faster than the alternative of using string functions. HTH...<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">truncate </span><span class="keyword">(</span><span class="default">$num</span><span class="keyword">, </span><span class="default">$digits </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">) {<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="comment">//provide the real number, and the number of <br />
&nbsp;&nbsp;&nbsp; //digits right of the decimal you want to keep.<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$shift </span><span class="keyword">= </span><span class="default">pow</span><span class="keyword">(</span><span class="default">10</span><span class="keyword">, </span><span class="default">$digits</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; return ((</span><span class="default">floor</span><span class="keyword">(</span><span class="default">$num </span><span class="keyword">* </span><span class="default">$shift</span><span class="keyword">)) / </span><span class="default">$shift</span><span class="keyword">);<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="24052"></a>
 <div class="note">
  <strong>patience at worldonline dot nl</strong><br />
  <a href="#24052">05-Aug-2002 09:08</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The example for Factorials given above is wrong. Here a correct version, so that you do not have to reinvent the wheel again...<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">mathFact</span><span class="keyword">( </span><span class="default">$s </span><span class="keyword">)<br />
{<br />
&nbsp; </span><span class="default">$r </span><span class="keyword">= (int) </span><span class="default">$s</span><span class="keyword">;<br />
<br />
&nbsp; if ( </span><span class="default">$r </span><span class="keyword">&lt; </span><span class="default">2 </span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$r </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp; else {<br />
&nbsp;&nbsp;&nbsp; for ( </span><span class="default">$i </span><span class="keyword">= </span><span class="default">$r</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&gt; </span><span class="default">1</span><span class="keyword">; </span><span class="default">$i</span><span class="keyword">-- )<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$r </span><span class="keyword">= </span><span class="default">$r </span><span class="keyword">* </span><span class="default">$i</span><span class="keyword">;<br />
&nbsp; }<br />
<br />
&nbsp; return( </span><span class="default">$r </span><span class="keyword">);<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="23062"></a>
 <div class="note">
  <strong>shanx at shanx dot com</strong><br />
  <a href="#23062">08-Jul-2002 01:13</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
&lt;?<br />
<br />
/**<br />
&nbsp;* Function to calculate base36 values from a number. Very <br />
&nbsp;* useful if you wish to generate IDs from numbers. <br />
&nbsp;* <br />
&nbsp;* @param $value The number <br />
&nbsp;* @param $base The base to be applied (16, 36 or 64)<br />
&nbsp;* @return The calculated string <br />
&nbsp;* @author Shashank Tripathi (shanx@shanx.com)<br />
&nbsp;* @version 0.1 - Let me know if something doesnt work<br />
&nbsp;* <br />
&nbsp;*/<br />
&nbsp;<br />
function base36($value, $base) <br />
{<br />
&nbsp;&nbsp;&nbsp; $baseChars = array('0', '1', '2', '3', '4', '5',<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '6', '7', '8', '9', 'a', 'b',<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'c', 'd', 'e', 'f', 'g', 'h',<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'i', 'j', 'k', 'l', 'm', 'n',<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'o', 'p', 'q', 'r', 's', 't',<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'u', 'v', 'w', 'x', 'y', 'z'<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );<br />
<br />
&nbsp;&nbsp;&nbsp; $remainder = 0;<br />
&nbsp;&nbsp;&nbsp; $newval = "";<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; while ( $value &gt; 0 ) <br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $remainder = $value % $base;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $value = ( ($value - $remainder)/ $base );<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $newval .= $baseChars[$remainder];<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; return strrev($newval);<br />
&nbsp;&nbsp;&nbsp; <br />
}<br />
<br />
echo "The string for 46655, for instance, is " . base36(46655, 36);<br />
<br />
?&gt;</span>
</code></div>
  </div>
 </div>
 <a name="21947"></a>
 <div class="note">
  <strong>webkid%webkid.com</strong><br />
  <a href="#21947">31-May-2002 03:54</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
And the reason I needed a Factorial function is because I there were no nPr or nCr functions native to PHP, either.<br />
<br />
function n_pick_r($n,$r){$n=(int)$n; $r=(int)$r;return (fact($n)/fact($n-$r));}<br />
function n_choose_r($n,$r){$n=(int)$n; $r=(int)$r;return (n_pick_r($n,$r)/fact($r));}<br />
<br />
Hope that helps someone!</span>
</code></div>
  </div>
 </div>
 <a name="21946"></a>
 <div class="note">
  <strong>webkid%webkid.com</strong><br />
  <a href="#21946">31-May-2002 03:49</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I found it kind of irritating that PHP had no native functionality for a calculating Factorials. Since I really didn't feel like loading the GMP library, I figured I'd write my own function.<br />
<br />
function fact($s){$r=(int)$s; for ($i=$r;$i--;$i&gt;1){$r=$r*$i;} return $r;}<br />
<br />
I think that's right... I havn't tested it extensively but it should work.</span>
</code></div>
  </div>
 </div>
 <a name="13343"></a>
 <div class="note">
  <strong>cornelius at skjoldhoej dot dk</strong><br />
  <a href="#13343">12-Jun-2001 02:03</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I found that when dealing with tables, a 'least common multiple' function is sometimes useful for abusing tablespan and the likes.<br />
<br />
So here goes (you may choose to remove the first part of the gcd function if the function call is well-behaved):<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">function </span><span class="default">gcd</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">, </span><span class="default">m</span><span class="keyword">) </span><span class="comment">//greatest common divisor<br />
</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">n</span><span class="keyword">=</span><span class="default">abs</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">); </span><span class="default">m</span><span class="keyword">=</span><span class="default">abs</span><span class="keyword">(</span><span class="default">m</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">n</span><span class="keyword">==</span><span class="default">0 </span><span class="keyword">and </span><span class="default">m</span><span class="keyword">==</span><span class="default">0</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">1</span><span class="keyword">; </span><span class="comment">//avoid infinite recursion<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">if (</span><span class="default">n</span><span class="keyword">==</span><span class="default">m </span><span class="keyword">and </span><span class="default">n</span><span class="keyword">&gt;=</span><span class="default">1</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">n</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">m</span><span class="keyword">&lt;</span><span class="default">n</span><span class="keyword">?</span><span class="default">gcd</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">-</span><span class="default">m</span><span class="keyword">,</span><span class="default">n</span><span class="keyword">):</span><span class="default">gcd</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">,</span><span class="default">m</span><span class="keyword">-</span><span class="default">n</span><span class="keyword">);<br />
}<br />
<br />
function </span><span class="default">lcm</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">, </span><span class="default">m</span><span class="keyword">) </span><span class="comment">//least common multiple<br />
</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">m</span><span class="keyword">*(</span><span class="default">n</span><span class="keyword">/</span><span class="default">gcd</span><span class="keyword">(</span><span class="default">n</span><span class="keyword">,</span><span class="default">m</span><span class="keyword">));<br />
}<br />
</span><span class="default">?&gt;<br />
</span><br />
This may or may not be something to consider adding to the mathematical function library.</span>
</code></div>
  </div>
 </div>
 <a name="11400"></a>
 <div class="note">
  <strong>ian at mp3 dot com</strong><br />
  <a href="#11400">19-Feb-2001 03:43</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
for those looking for a credit card verification function i wrote a simple LUHN Formula algorithm:<br />
<br />
<span class="default">&lt;?php<br />
$valid </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
<br />
</span><span class="default">$numOfDigits </span><span class="keyword">= </span><span class="default">0 </span><span class="keyword">- </span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$ccNumber</span><span class="keyword">);<br />
<br />
</span><span class="default">$i </span><span class="keyword">= -</span><span class="default">1</span><span class="keyword">;<br />
while (</span><span class="default">$i</span><span class="keyword">&gt;=</span><span class="default">$numOfDigits</span><span class="keyword">){<br />
&nbsp; if ((</span><span class="default">$i </span><span class="keyword">% </span><span class="default">2</span><span class="keyword">) == </span><span class="default">0</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$double </span><span class="keyword">= </span><span class="default">2</span><span class="keyword">*(</span><span class="default">substr</span><span class="keyword">(</span><span class="default">$ccNumber</span><span class="keyword">, </span><span class="default">$i</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">));<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$total </span><span class="keyword">+= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$double</span><span class="keyword">,</span><span class="default">0</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$double </span><span class="keyword">&gt; </span><span class="default">1</span><span class="keyword">)){<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$total </span><span class="keyword">+= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$double</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; } else {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$total </span><span class="keyword">+= </span><span class="default">substr</span><span class="keyword">(</span><span class="default">$ccNumber</span><span class="keyword">, </span><span class="default">$i</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp; }<br />
&nbsp; </span><span class="default">$i</span><span class="keyword">--;<br />
}<br />
<br />
if ((</span><span class="default">$total </span><span class="keyword">% </span><span class="default">10</span><span class="keyword">) != </span><span class="default">0</span><span class="keyword">){<br />
&nbsp; </span><span class="default">$valid </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">;<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="7667"></a>
 <div class="note">
  <strong>cathody at mail dot ru</strong><br />
  <a href="#7667">10-Aug-2000 07:55</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Converting non-standard form:<br />
<br />
you can use something like this:<br />
<br />
<span class="default">&lt;?php<br />
$v</span><span class="keyword">=</span><span class="default">0.3e-9</span><span class="keyword">;<br />
</span><span class="default">$v</span><span class="keyword">=</span><span class="default">sprintf </span><span class="keyword">( </span><span class="string">"%2.9f"</span><span class="keyword">, </span><span class="default">$v</span><span class="keyword">);<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <div class="foot"><a href="/manual/add-note.php?sect=ref.math&amp;redirect=http://www.php.net/manual/en/ref.math.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.math&amp;redirect=http://www.php.net/manual/en/ref.math.php">add a note</a></small></div>
</div><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.abs.php">abs<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.math.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Math</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


 </div>
 <div class="cleaner">&nbsp;</div>
</div>

<div id="footnav">
   <a href="/source.php?url=/manual/en/ref.math.php">show source</a> |
 <a href="/credits.php">credits</a> |
 <a href="/stats/">stats</a> |
 <a href="/sitemap.php">sitemap</a> |
 <a href="/contact.php">contact</a> |
 <a href="/contact.php#ads">advertising</a> |
 <a href="/mirrors.php">mirror sites</a>
</div>

<div id="pagefooter">
 <div id="copyright">
  <a href="/copyright.php">Copyright &copy; 2001-2008 The PHP Group</a><br />
  All rights reserved.
 </div>

 <div id="thismirror">
  <a href="/mirror.php">This mirror</a> generously provided by:
  <a href="http://developer.yahoo.com/">Yahoo! Inc.</a><br />
  Last updated: Wed Apr 16 05:27:53 2008 PDT
 </div>
</div>

</body>
</html>