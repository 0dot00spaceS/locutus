<?php
ini_set("include_path", "../_tools/PHPJS_Library/PHPJS".PATH_SEPARATOR."../../../../_tools/PHPJS_Library/PHPJS".PATH_SEPARATOR.ini_get("include_path"));
require_once 'PHPUnit/Framework.php';

require_once 'Library.php';

/**
 * Test class for PHPJS_Library.
 * Generated by PHPUnit on 2009-03-16 at 18:19:57.
 */
class PHPJS_LibraryCompilerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    PHPJS_Library
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $p = dirname(dirname(dirname(dirname(dirname(__FILE__))))).'/functions';
        $this->object = new PHPJS_Library_Compiler($p);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetDirRealTemp().
     */
    public function testIsFlagEnabled() {

        $flags = 0;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_NAMESPACED;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_MINFIED;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_PACKED;
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_NAMESPACED));
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_MINFIED));
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_PACKED));

        $flags = 0;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_NAMESPACED;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_MINFIED;
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_NAMESPACED));
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_MINFIED));
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_PACKED));

        $flags = 0;
        $flags = $flags | PHPJS_Library_Compiler::COMPILE_NAMESPACED;
        $this->assertTrue($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_NAMESPACED));
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_MINFIED));
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_PACKED));

        $flags = 0;
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_NAMESPACED));
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_MINFIED));
        $this->assertFalse($this->object->isFlagEnabled($flags, PHPJS_Library_Compiler::COMPILE_PACKED));

    }

}
?>
