---
layout: post
title: "Switching to Jekyll"
date: 2016-04-01 13:50
comments: true
categories: [ website, octopress, jekyll, future ]
---

Hi all,

[Four years ago](http://phpjs.org/blog/2012/09/26/new-site/) we switched from a PHP generated site to 
one built in Octopress, so it would be easier for people to contribute, and we would not have to worry
about keeping servers online.

Things have changed since then. The Octopress version we used is no longer supported, and the new
3.0 is leans heavily on Jekyll.

With the backing of GitHub for GitHub Pages, Jekyll itself has improved tremendously. 

Combined, I felt we reached the tipping point where it made more sense to port things to Jekyll
so we can profit from their speed of development, ecosystem, and the fact that many developers
are already familiar with it.

Long story short, 


Three years ago we switched from our own home-brown coding style convention to Felixâ€™ Node.js Style Guide, 
for reasons outlined in the introductory post: [Coding Style](/blog/2013/05/04/coding-style/).

The reasoning behind adopting such a widely supported coding style, has not changed. php.js should be
focused on its added value, and less so arguing about, and inventing custom conventions around coding style.

What has changed a great deal though, is the JavaScript landscape. A large part of the community is gathering behind [Feross Aboukhadijeh's JavaScript Standard Style](http://standardjs.com/) and [ESLint](http://eslint.org/).

Standard offers sensible defaults (no semicolons might take some getting used to but it's really [ok](http://mislav.net/2010/05/semicolons/) and after two weeks you won't look back). ESLint offers powerful ways to enforce the standard.

ESLint for instance, offers a `--fix` command-line argument flag, that converts non-conforming codebases to whichever coding style convention was selected.

The auto-fixing does not cover all rules yet, but it's getting better every month. As we upgrade these modules and fix our codebase, more and more legacy will conform.

Additionally, I've added non-fatal linting to our Travis CI builds, so you can see which functions don't comply, and make them.

php.js does few naughty tricks to bend the laws of physics and overcome a few obstacles in porting programming languages. For this reason, php.js a few exceptions listed in `.eslintrc`. As a goal for the future, it would be interesting to see if we could lose these exceptions.


Best wishes,

[Kevin](http://twitter.com/kvz)
