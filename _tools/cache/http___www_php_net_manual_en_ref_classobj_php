<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://purl.org/NET/erdf/profile">
 <title>PHP: Class/Object Functions - Manual</title>
 <style type="text/css" media="all">
  @import url("http://static.php.net/www.php.net/styles/site.css");
  @import url("http://static.php.net/www.php.net/styles/phpnet.css");
 </style>
 <!--[if IE]><![if gte IE 6]><![endif]-->
  <style type="text/css" media="print">
   @import url("http://static.php.net/www.php.net/styles/print.css");
  </style>
 <!--[if IE]><![endif]><![endif]-->
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
 <link rel="shortcut icon" href="http://static.php.net/www.php.net/favicon.ico" />
 <link rel="contents" href="index.php" />
 <link rel="index" href="book.classobj.php" />
 <link rel="prev" href="book.classobj.php" />
 <link rel="next" href="function.call-user-method-array.php" />
 <link rel="schema.dc" href="http://purl.org/dc/elements/1.1/" />
 <link rel="schema.rdfs" href="http://www.w3.org/2000/01/rdf-schema#" />
 <script type="text/javascript" src="http://static.php.net/www.php.net/userprefs.js"></script>
 <base href="http://www.php.net/manual/en/ref.classobj.php" />
</head>
<body>

<div id="headnav">
 <a href="/" rel="home"><img src="http://static.php.net/www.php.net/images/php.gif"
 alt="PHP" width="120" height="67" /></a>
 <div id="headmenu">
  <a href="/downloads.php">downloads</a> |
  <a href="/docs.php">documentation</a> |
  <a href="/FAQ.php">faq</a> |
  <a href="/support.php">getting help</a> |
  <a href="/mailing-lists.php">mailing lists</a> |
  <a href="http://bugs.php.net/">reporting bugs</a> |
  <a href="/sites.php">php.net sites</a> |
  <a href="/links.php">links</a> |
  <a href="/conferences/">conferences</a> |
  <a href="/my.php">my php.net</a>
 </div>
</div>

<div id="headsearch">
 <form method="post" action="/search.php" id="topsearch">
  <p>
   <span title="Keyboard shortcut: Alt+S (Win), Ctrl+S (Apple)">
    <span class="shortkey">s</span>earch for
   </span>
   <input type="text" name="pattern" value="" size="30" accesskey="s" />
   <span>in the</span>
   <select name="show">
    <option value="quickref" selected="selected">function list</option>
    <option value="all"      >all php.net sites</option>
    <option value="local"    >this mirror only</option>
    <option value="manual"   >online documentation</option>
    <option value="bugdb"    >bug database</option>
    <option value="news_archive">Site News Archive</option>
    <option value="changelogs">All Changelogs</option>
    <option value="pear"     >just pear.php.net</option>
    <option value="pecl"     >just pecl.php.net</option>
    <option value="talks"    >just talks.php.net</option>
    <option value="maillist" >general mailing list</option>
    <option value="devlist"  >developer mailing list</option>
    <option value="phpdoc"   >documentation mailing list</option>
   </select>
   <input type="image"
          src="http://static.php.net/www.php.net/images/small_submit_white.gif"
          class="submit" alt="search" />
   <input type="hidden" name="lang" value="en" />
  </p>
 </form>
</div>

<div id="layout_2">
 <div id="leftbar">
<!--UdmComment-->
<ul class="toc">
 <li class="header home"><a href="index.php">PHP Manual</a></li>
 <li class="header up"><a href="funcref.php">Function Reference</a></li>
 <li class="header up"><a href="refs.basic.vartype.php">Variable and Type Related Extensions</a></li>
 <li class="header up"><a href="book.classobj.php">Class/Object Functions</a></li>
 <li><a href="intro.classobj.php">Introduction</a></li>
 <li><a href="classobj.setup.php">Installing/Configuring</a></li>
 <li><a href="classobj.constants.php">Predefined Constants</a></li>
 <li><a href="classobj.examples.php">Examples</a></li>
 <li class="active"><a href="ref.classobj.php">Class/Object Functions</a></li>
</ul><!--/UdmComment-->

 </div>
 <div id="content" class="manual/en">
<!--UdmComment-->
<div class="manualnavbar manualnavbar_top">
 <span class="next">
  <a href="function.call-user-method-array.php">call_user_method_array<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.classobj.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Classes/Objects</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  <form action="/manual/change.php" method="get">
   <p>view this page in </p><fieldset><select name="page">
    <option value="bg/ref.classobj.php">Bulgarian</option>
    <option value="pt_BR/ref.classobj.php">Brazilian Portuguese</option>
    <option value="fr/ref.classobj.php">French</option>
    <option value="de/ref.classobj.php">German</option>
    <option value="it/ref.classobj.php">Italian</option>
    <option value="ja/ref.classobj.php">Japanese</option>
    <option value="pl/ref.classobj.php">Polish</option>
    <option value="ro/ref.classobj.php">Romanian</option>
    <option value="ru/ref.classobj.php">Russian</option>
    <option value="es/ref.classobj.php">Spanish</option>
    <option value="help-translate.php">Other</option>
   </select>
   <input type="image" src="http://static.php.net/www.php.net/images/small_submit.gif" id="changeLangImage" alt="" />
  </fieldset></form>
 </div>
</div>
<!--/UdmComment-->

<div>
 <h1 class="title">Class/Object Functions</h1>

 



























































































<h2>Table of Contents</h2><ul class="chunklist chunklist_reference"><li><a href="function.call-user-method-array.php">call_user_method_array</a> — Call a user method given with an array of parameters [deprecated]</li><li><a href="function.call-user-method.php">call_user_method</a> — Call a user method on an specific object [deprecated]</li><li><a href="function.class-exists.php">class_exists</a> — Checks if the class has been defined</li><li><a href="function.get-class-methods.php">get_class_methods</a> — Gets the class methods' names</li><li><a href="function.get-class-vars.php">get_class_vars</a> — Get the default properties of the class</li><li><a href="function.get-class.php">get_class</a> — Returns the name of the class of an object</li><li><a href="function.get-declared-classes.php">get_declared_classes</a> — Returns an array with the name of the defined classes</li><li><a href="function.get-declared-interfaces.php">get_declared_interfaces</a> — Returns an array of all declared interfaces</li><li><a href="function.get-object-vars.php">get_object_vars</a> — Gets the properties of the given object</li><li><a href="function.get-parent-class.php">get_parent_class</a> — Retrieves the parent class name for object or class</li><li><a href="function.interface-exists.php">interface_exists</a> — Checks if the interface has been defined</li><li><a href="function.is-a.php">is_a</a> — Checks if the object is of this class or has this class as one of its parents</li><li><a href="function.is-subclass-of.php">is_subclass_of</a> — Checks if the object has this class as one of its parents</li><li><a href="function.method-exists.php">method_exists</a> — Checks if the class method exists</li><li><a href="function.property-exists.php">property_exists</a> — Checks if the object or class has a property</li></ul>
</div>
<br /><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.call-user-method-array.php">call_user_method_array<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.classobj.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Classes/Objects</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


<div id="usernotes">
 <div class="head">
  <span class="action"><a href="/manual/add-note.php?sect=ref.classobj&amp;redirect=http://www.php.net/manual/en/ref.classobj.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.classobj&amp;redirect=http://www.php.net/manual/en/ref.classobj.php">add a note</a></small></span>
  <small>User Contributed Notes</small><br />
  <strong>Class/Object Functions</strong>
 </div>
 <a name="81249"></a>
 <div class="note">
  <strong>zerotwo at bk dot ru</strong><br />
  <a href="#81249">19-Feb-2008 10:50</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Sorry for my bad language.<br />
<br />
Main class that ad’s other classes from includes<br />
<br />
main.php :<br />
<br />
define(EXT, '.php');<br />
<br />
$config = array(<br />
&nbsp; 'path' =&gt; array (<br />
&nbsp;&nbsp;&nbsp; 'data' =&gt; 'data/',<br />
&nbsp;&nbsp;&nbsp; 'inc' =&gt; 'inc/',<br />
&nbsp;&nbsp;&nbsp; 'lang' =&gt; 'lng/',<br />
&nbsp;&nbsp;&nbsp; 'dl' =&gt; 'dl/',<br />
&nbsp; ),<br />
&nbsp;...<br />
);<br />
<br />
class general {<br />
&nbsp; private $cfg;<br />
&nbsp; public $call = array();<br />
<br />
&nbsp; function __construct($configs) {<br />
&nbsp;&nbsp;&nbsp; global ${"$configs"};<br />
&nbsp;&nbsp;&nbsp; $this-&gt;cfg = $configs;<br />
&nbsp; }<br />
<br />
&nbsp; function _include($filename) {<br />
&nbsp;&nbsp;&nbsp; foreach($this-&gt;cfg[path] as $dir) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(file_exists($dir.$filename.EXT)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; include($dir.$filename.EXT);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(class_exists($filename)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;call[$filename] = new $filename();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return true;<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; ...<br />
}<br />
<br />
$main = new general();<br />
<br />
// call profiler-&gt;start()<br />
<br />
$main-&gt;call[profiler]-&gt;start();<br />
<br />
profiler.php :<br />
<br />
class profiler {<br />
// simple profiler<br />
&nbsp; private $time_start;<br />
&nbsp; <br />
&nbsp; private function get_time() {<br />
&nbsp;&nbsp;&nbsp; list($usec, $sec) = explode(' ', microtime());<br />
&nbsp;&nbsp;&nbsp; return ((float)$usec + (float)$sec);<br />
&nbsp; }<br />
&nbsp; <br />
&nbsp; function start() {<br />
&nbsp;&nbsp;&nbsp; $this-&gt;time_start = $this-&gt;get_time();<br />
&nbsp; }<br />
&nbsp; function finish() {<br />
&nbsp;&nbsp;&nbsp; return ($this-&gt;get_time() - $this-&gt;time_start);<br />
&nbsp; }<br />
}<br />
<br />
index.php :<br />
<br />
require('main.php');<br />
...<br />
$main-&gt;call[profiler]-&gt;finish();<br />
<br />
You can edit $config to add path to other directories, and do $main-&gt;_include(‘CLASS) and it will include a script and if class named ‘CLASS exist it will create a new class in call[].<br />
You can easily access class $main-&gt;call[‘CLASS]<br />
<br />
Thank you for reading.</span>
</code></div>
  </div>
 </div>
 <a name="79941"></a>
 <div class="note">
  <strong>ahigerd at timeips dot com</strong><br />
  <a href="#79941">20-Dec-2007 07:02</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
To access an object member with an illegal character in the name, use this syntax:<br />
<br />
$obj-&gt;{'illegal-property:name()'}<br />
<br />
This is particularly relevant with the dynamically-generated classes used by, for instance, database objects and the SoapClient class.</span>
</code></div>
  </div>
 </div>
 <a name="57759"></a>
 <div class="note">
  <strong>pascal dot poncet at netconsult dot com</strong><br />
  <a href="#57759">13-Oct-2005 07:21</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Subject: using "sql_calc_found_rows" in a MySQL query while exploiting result in a PHP db class object.<br />
<br />
Hello,<br />
<br />
There is a nice function in MySQL that allows to know how many records would have been returned if no "where" clause were set : SQL_CALC_FOUND_ROWS.<br />
<br />
If you have create a db object to collect the returned lines, you will be a little perplex when trying to call the result of this function.<br />
<br />
Why ?<br />
Simply because the returned field's name is "found_rows()" and obviously it's not possible to call something like :<br />
<br />
<span class="default">&lt;?php $result</span><span class="keyword">-&gt;</span><span class="default">found_rows</span><span class="keyword">() </span><span class="default">?&gt;<br />
</span><br />
...as it will try to acces a method, not a property !<br />
<br />
Then, the only way to get the right result seems to be the use of a class function, like :<br />
<br />
<span class="default">&lt;?php<br />
&nbsp; $db</span><span class="keyword">-&gt;</span><span class="default">query</span><span class="keyword">(</span><span class="string">"select found_rows()"</span><span class="keyword">);<br />
&nbsp; </span><span class="default">$count</span><span class="keyword">=</span><span class="default">current</span><span class="keyword">(</span><span class="default">get_object_vars</span><span class="keyword">(</span><span class="default">current</span><span class="keyword">(</span><span class="default">$db</span><span class="keyword">-&gt;</span><span class="default">result</span><span class="keyword">)));<br />
</span><span class="default">?&gt;<br />
</span><br />
Of course, if somebody found an other way to solve it, like a special syntax (see the one used with curled arrays in a string), I'm really open to discuss.<br />
<br />
Good luck,<br />
Pascal</span>
</code></div>
  </div>
 </div>
 <a name="55423"></a>
 <div class="note">
  <strong>ia [AT] zoznam [DOT] sk</strong><br />
  <a href="#55423">02-Aug-2005 10:55</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
as for zabmilenko's solution:<br />
wouldn't it be better to create it this way?<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="comment">// The base class for all db classes<br />
</span><span class="keyword">class </span><span class="default">DB </span><span class="keyword">{<br />
&nbsp;protected </span><span class="default">$connectId</span><span class="keyword">;<br />
}<br />
<br />
</span><span class="comment">// Class for MySQL, which extends base class<br />
</span><span class="keyword">class </span><span class="default">MySQL </span><span class="keyword">extends </span><span class="default">DB </span><span class="keyword">{<br />
&nbsp;function </span><span class="default">connect </span><span class="keyword">() {<br />
&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">connectId </span><span class="keyword">= </span><span class="default">mysql_connect </span><span class="keyword">(...); <br />
&nbsp;}<br />
}<br />
<br />
</span><span class="comment">// Class for PostgreSQL, which extends base class<br />
</span><span class="keyword">class </span><span class="default">pgSQL </span><span class="keyword">extends </span><span class="default">DB </span><span class="keyword">{<br />
&nbsp;function </span><span class="default">connect </span><span class="keyword">() {<br />
&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">connectId </span><span class="keyword">= </span><span class="default">pg_connect </span><span class="keyword">(...); <br />
&nbsp;}<br />
}<br />
<br />
</span><span class="comment">// and then call constructor like this:<br />
</span><span class="default">$dbName </span><span class="keyword">= </span><span class="string">"MySQL"</span><span class="keyword">;<br />
</span><span class="default">$db </span><span class="keyword">= new </span><span class="default">$dbName </span><span class="keyword">( ... );<br />
</span><span class="comment">// ... which creates an object of class MySQL<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="54194"></a>
 <div class="note">
  <strong>zabmilenko at hotmail dot com</strong><br />
  <a href="#54194">27-Jun-2005 12:08</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
((PHP5))<br />
<br />
I wanted to dynamically choose an extender for a class.&nbsp; This took awhile of playing with it but I came up with a solution.&nbsp; Note that I can't verify how safe it is, but it appears to work for me.&nbsp; Perhaps someone else can shed light on the details:<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">class </span><span class="default">A </span><span class="keyword">{ var </span><span class="default">$value </span><span class="keyword">= </span><span class="string">"Class A\n"</span><span class="keyword">; }<br />
class </span><span class="default">B </span><span class="keyword">{ var </span><span class="default">$value </span><span class="keyword">= </span><span class="string">"Class B\n"</span><span class="keyword">; }<br />
<br />
</span><span class="comment">// Uncomment which extender you want.&nbsp; You can use variables as well.<br />
// define('__EXTENDER__', 'A');<br />
&nbsp;&nbsp; </span><span class="default">define</span><span class="keyword">(</span><span class="string">'__EXTENDER__'</span><span class="keyword">, </span><span class="string">'B'</span><span class="keyword">);<br />
<br />
</span><span class="comment">// Use eval to create a wrapper class.<br />
</span><span class="keyword">eval(</span><span class="string">'class EXTENDER extends '</span><span class="keyword">. </span><span class="default">__EXTENDER__ </span><span class="keyword">. </span><span class="string">' { }'</span><span class="keyword">);<br />
<br />
class </span><span class="default">C </span><span class="keyword">extends </span><span class="default">EXTENDER<br />
</span><span class="keyword">{<br />
&nbsp; function </span><span class="default">__construct</span><span class="keyword">()<br />
&nbsp; {<br />
&nbsp;&nbsp; &nbsp; echo </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">value</span><span class="keyword">;<br />
&nbsp; }<br />
}<br />
<br />
</span><span class="default">$t </span><span class="keyword">= new </span><span class="default">C</span><span class="keyword">;<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
Outputs:&nbsp;&nbsp; Class B<br />
<br />
Practical application:&nbsp; I have a database abstraction system that has individual classes for mysql, pgsql, et al.&nbsp; I want to be able to create a global db class that extends one of the individual db classes depending on the application configuration.<br />
<br />
I know that there are probably much better ways of doing this but I haven't reached that level when it comes to classes.</span>
</code></div>
  </div>
 </div>
 <a name="50578"></a>
 <div class="note">
  <strong>cjones</strong><br />
  <a href="#50578">03-Mar-2005 01:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If anyone is interested in looking for a way to dynamically load existing objects into a class, here is what I found very useful.<br />
<br />
//---------------------------------------------------------<br />
// Dynamically load External Objects into a class<br />
<br />
&nbsp; function objRef ( &amp;$obj ) {&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; eval("\$this-&gt;obj_".get_class($obj)." = \$obj;"); <br />
&nbsp; }<br />
//---------------------------------------------------------<br />
// Reference by using: $this-&gt;obj_[object Name]-&gt;[var|f{}]<br />
<br />
Example:<br />
<br />
class date {&nbsp; function date ( ) { $this-&gt;date = "March 3rd"; } }<br />
class time {&nbsp; function time ( ) { $this-&gt;time = "12:30pm"; } }<br />
<br />
class show {<br />
&nbsp;&nbsp;&nbsp; function objRef ( &amp;$obj ){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; eval("\$this-&gt;obj_".get_class($obj)." = \$obj;");<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp; function test ( $var ){<br />
&nbsp;&nbsp; &nbsp; &nbsp; echo "$var".$this-&gt;obj_date-&gt;date." @ ".$this-&gt;obj_time-&gt;time;<br />
&nbsp;&nbsp; }<br />
}<br />
<br />
$date = new date;<br />
$time = new time;<br />
$show = new show;<br />
&nbsp;&nbsp;&nbsp; $show-&gt;objRef($date);<br />
&nbsp;&nbsp;&nbsp; $show-&gt;objRef($time);<br />
&nbsp;&nbsp;&nbsp; $show-&gt;test("Time Now =&gt; ");<br />
<br />
// Output: Time Now =&gt; March 3rd @ 12:30pm<br />
<br />
I found the prefix 'obj_' before the class name useful because it helped me to automatically identify external object references when scanning through my scripts. You can omit this if you want. Hope this helps someone.</span>
</code></div>
  </div>
 </div>
 <a name="50524"></a>
 <div class="note">
  <strong>http://sc.tri-bit.com/ StoneCypher</strong><br />
  <a href="#50524">02-Mar-2005 10:25</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
to covertka at muohio dot edu and pillepop2003 at yahoo dot de:<br />
<br />
There's a much easier solution to getting a class' name for working with a factory function.&nbsp; Let's assume you're doing something like this:<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp; </span><span class="keyword">function </span><span class="default">FactoryFunction</span><span class="keyword">(</span><span class="default">$whatever</span><span class="keyword">, </span><span class="default">$instancedata</span><span class="keyword">) {<br />
<br />
&nbsp;&nbsp;&nbsp; switch (</span><span class="default">$whatever</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; case </span><span class="string">'stuff'&nbsp; &nbsp; &nbsp; </span><span class="keyword">: return new </span><span class="default">Stuff</span><span class="keyword">(</span><span class="default">$instancedata</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; case </span><span class="string">'otherstuff' </span><span class="keyword">: return new </span><span class="default">Otherstuff</span><span class="keyword">(</span><span class="default">$instancedata</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp; }<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
Now, consider the named parameter idiom and remember that PHP uses hashes for everything; as a result make the following changes:<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp; </span><span class="keyword">function </span><span class="default">FactoryFunction</span><span class="keyword">(</span><span class="default">$whatever</span><span class="keyword">, </span><span class="default">$instancedata</span><span class="keyword">) {<br />
<br />
&nbsp;&nbsp;&nbsp; switch (</span><span class="default">$whatever</span><span class="keyword">) {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; case </span><span class="string">'stuff'&nbsp; &nbsp; &nbsp; </span><span class="keyword">: return array(</span><span class="string">'typeis'</span><span class="keyword">=&gt;</span><span class="string">'stuff'</span><span class="keyword">,&nbsp; &nbsp; &nbsp; </span><span class="string">'instance'</span><span class="keyword">=&gt;new </span><span class="default">Stuff</span><span class="keyword">(</span><span class="default">$instancedata</span><span class="keyword">));<br />
&nbsp;&nbsp; &nbsp;&nbsp; case </span><span class="string">'otherstuff' </span><span class="keyword">: return array(</span><span class="string">'typeis'</span><span class="keyword">=&gt;</span><span class="string">'otherstuff'</span><span class="keyword">, </span><span class="string">'instance'</span><span class="keyword">=&gt;new </span><span class="default">Otherstuff</span><span class="keyword">(</span><span class="default">$instancedata</span><span class="keyword">));<br />
<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp; }<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
Nice 'n simple.&nbsp; It seems that what the original poster wanted was something like C++ static data members; unfortunately as PHP4 has no static variables at all, there would need to be significant language change to support static-like behavior.&nbsp; If you move to PHP5, the static keyword solves your problem cleanly.</span>
</code></div>
  </div>
 </div>
 <a name="48641"></a>
 <div class="note">
  <strong>covertka at muohio dot edu</strong><br />
  <a href="#48641">02-Jan-2005 05:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
To pillepop2003 at yahoo dot de:<br />
<br />
I have the same issue.&nbsp; I have a base class that manages database tasks for a number of child classes.&nbsp; One of the functions in the base class is a find() method that returns instances of the child classes.&nbsp; Since find() is usually called as a static method, it needs to know the name of the child class.&nbsp; As you've found, this appears to be impossible to get in an easy fashion.<br />
<br />
The only way I've found to get the child class name is to use the debug_traceback() function.&nbsp; This requires me to have a find() method in every child class, but it does work.<br />
<br />
Here's an example:<br />
<br />
<span class="default">&lt;?php<br />
&nbsp; </span><span class="keyword">require_once(</span><span class="string">"Application.php"</span><span class="keyword">);<br />
<br />
&nbsp; class </span><span class="default">parentClass </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">find</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$className </span><span class="keyword">= </span><span class="default">NULL</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; foreach (</span><span class="default">debug_backtrace</span><span class="keyword">() as </span><span class="default">$bt</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$bt</span><span class="keyword">[</span><span class="string">'function'</span><span class="keyword">] == </span><span class="default">__FUNCTION__</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$className </span><span class="keyword">= </span><span class="default">$bt</span><span class="keyword">[</span><span class="string">'class'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="comment">// here should be some code to find the proper id, let's assume it was id 1<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$id </span><span class="keyword">= </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; return new </span><span class="default">$className</span><span class="keyword">(</span><span class="default">$id</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
&nbsp; <br />
&nbsp; class </span><span class="default">foo </span><span class="keyword">extends </span><span class="default">parentClass </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">__construct</span><span class="keyword">(</span><span class="default">$id</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">id </span><span class="keyword">= </span><span class="default">id</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">find</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">parent</span><span class="keyword">::</span><span class="default">find</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
&nbsp; <br />
&nbsp; class </span><span class="default">bar </span><span class="keyword">extends </span><span class="default">parentClass </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">__construct</span><span class="keyword">(</span><span class="default">$id</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">id </span><span class="keyword">= </span><span class="default">id</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">find</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp;&nbsp; return </span><span class="default">parent</span><span class="keyword">::</span><span class="default">find</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
&nbsp; <br />
&nbsp; </span><span class="default">$a </span><span class="keyword">= </span><span class="default">foo</span><span class="keyword">::</span><span class="default">find</span><span class="keyword">();<br />
&nbsp; </span><span class="default">printf</span><span class="keyword">(</span><span class="string">"Type for \$a: %s&lt;br/&gt;\n"</span><span class="keyword">, </span><span class="default">get_class</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">));<br />
&nbsp; </span><span class="default">$b </span><span class="keyword">= </span><span class="default">bar</span><span class="keyword">::</span><span class="default">find</span><span class="keyword">();<br />
&nbsp; </span><span class="default">printf</span><span class="keyword">(</span><span class="string">"Type for \$b: %s&lt;br/&gt;\n"</span><span class="keyword">, </span><span class="default">get_class</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">));<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="44388"></a>
 <div class="note">
  <strong>iparanoid at gmx dot de</strong><br />
  <a href="#44388">04-Aug-2004 11:17</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
To pillepop2003 at yahoo dot de:<br />
<br />
It seems to me if there really is no nice way to get the class name in an un-instanciated class, there is a workaround in PHP5 though using static/class variables.<br />
<br />
Example: <br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">class </span><span class="default">myFoo <br />
</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; static </span><span class="default">$__ClassName </span><span class="keyword">= </span><span class="default">__CLASS__</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp;&nbsp; static function </span><span class="default">getClassName</span><span class="keyword">()<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">myFoo</span><span class="keyword">::</span><span class="default">$__ClassName</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
};<br />
<br />
class </span><span class="default">myFooExtended </span><span class="keyword">extends </span><span class="default">myFoo<br />
</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">__construct</span><span class="keyword">() <br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">myFooExtended</span><span class="keyword">::</span><span class="default">$__ClassName </span><span class="keyword">= </span><span class="default">__CLASS__</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; };<br />
};<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
However, you'll need to have at least instanciated an object of the class myFooExtended before calling getClassName or introduce some other initialization (the class variable will need to be set at some point to __CLASS__ in the sub-class).</span>
</code></div>
  </div>
 </div>
 <a name="43837"></a>
 <div class="note">
  <strong>greg at doutromundo dot com</strong><br />
  <a href="#43837">05-Jul-2004 07:58</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
As programmers, you're probably more organized than me, but, I do try and maintain some order in my classes and codes and separate them in "packages" as in java.<br />
This helped me keep them organized but caused havok when trying to use them, so what I did was to create a class that handles the loading of classes (which I instanciate in all pages) along with my error handling class all bundled up. This way, I can load my classes with a command similar to <br />
$baseClass-&gt;loadClass("package","className"[,"constructor"]);<br />
<br />
the function responsible for this has some checking to see if they are loaded and stuff like that...<br />
<br />
function loadClass($packageName,$className,$constructor=""){<br />
&nbsp; // if you dont have a constructor declare any function inside<br />
&nbsp; // the class<br />
&nbsp; if ($constructor==""){<br />
&nbsp;&nbsp;&nbsp; $constructor=$className;<br />
&nbsp; }<br />
&nbsp; if(!is_callable(array($className,$constructor))){<br />
&nbsp;&nbsp;&nbsp; if (defined("CLASS_DIR")){<br />
&nbsp;&nbsp; &nbsp;&nbsp; $pkg = CLASS_DIR.$packageName."/";<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (is_dir($pkg)){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // we have a directory with the package name<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $cls = $pkg.$className.".class.php";<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(is_file($cls)){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // we have a file<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; include_once($cls);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }else{<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; die("Class &lt;b&gt;$className&lt;/b&gt; could not be found in package &lt;b&gt;$packageName&lt;/b&gt; , please check your instalation");<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }else{<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; die("Package &lt;b&gt;$packageName&lt;/b&gt; could not be found, please check your instalation");<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
Just remember to define CLASS_DIR as the physical path for the directories where you packages are...<br />
<br />
Hope this comes in handy...<br />
<br />
Here's an example of a diretory strucutre...<br />
/var/www/classes/&nbsp;&nbsp; &lt;- this would be CLASS_DIR<br />
in there I have:<br />
package1/<br />
&nbsp;&nbsp; &nbsp; name.class.php<br />
&nbsp;&nbsp; &nbsp; name2.class.php<br />
....<br />
<br />
The loadClass would look like: loadClass("package1","name"); <br />
<br />
Cute and easy</span>
</code></div>
  </div>
 </div>
 <a name="43363"></a>
 <div class="note">
  <strong>ettinger at consultant dot com</strong><br />
  <a href="#43363">18-Jun-2004 04:59</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Re: Looking for an uninstantiated class<br />
<br />
# Loads data from a table into a class object<br />
class LFPDataFactory extends LFPObject {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; var $object;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; var $class;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; var $table;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; function LFPDataFactory($args) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;unpackArgs($args); // assigns locals from $args<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if (in_array(strtolower($this-&gt;class), get_declared_classes())) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;object = new $this-&gt;class;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // assemble the columns in the table...<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // select their values and put them in our new object...<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; } else { trigger_error("Class ".$this-&gt;class." not found", E_USER_ERROR); }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
}<br />
$r = new LFPDataFactory("class=LFPLayout,table=layout");<br />
$new_obj = $r-&gt;object; // this is a LFPLayout object.<br />
print_r($new_obj);<br />
<br />
This class looks to see if the class exists, then instantiates it -- a declared class is not the same as an instantiated class. As long as LFPLayout exists somewhere in the scripts, get_declared_classes() will find it. Remember strtolower on compare, however.<br />
<br />
Why would I do this? Because I have my class layouts the same as their respective tables; the factory then selects the data (making sure that the variables match) and plugs in the data. (I've left out the actual code to do the selection/insertion).</span>
</code></div>
  </div>
 </div>
 <a name="42769"></a>
 <div class="note">
  <strong>HOC</strong><br />
  <a href="#42769">28-May-2004 09:40</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
to pillepop2003<br />
<br />
Why do u want to know the classname of an non-existant object?<br />
<br />
The only possible explanation for this question seems to me u want to know the class before u instantiate the object. Well, this is of no use since u always instantiate a class of ur choice. <br />
<br />
When the class is instantiated into an object u can find the class of the object by means of get_class(). This is all u need. In case of inheritance u can use get_class($this) to get the class of the instantiated object. Now u can differentiate according to which class the object belongs to.<br />
<br />
e.g.:<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">class </span><span class="default">A</span><span class="keyword">{<br />
&nbsp;&nbsp; function </span><span class="default">A</span><span class="keyword">(){<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$class_of_this </span><span class="keyword">= </span><span class="default">get_class</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; echo </span><span class="string">'Object is an instance of class '</span><span class="keyword">.</span><span class="default">$class_of_this</span><span class="keyword">.</span><span class="string">' which is the '</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(</span><span class="default">strcmp</span><span class="keyword">(</span><span class="default">$class_of_this</span><span class="keyword">,</span><span class="string">'A'</span><span class="keyword">)==</span><span class="default">0</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; echo </span><span class="string">'parent-class'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; else if(</span><span class="default">strcmp</span><span class="keyword">(</span><span class="default">$class_of_this</span><span class="keyword">,</span><span class="string">'B'</span><span class="keyword">)==</span><span class="default">0</span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; echo </span><span class="string">'child-class'</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp;&nbsp; echo </span><span class="string">".\n"</span><span class="keyword">;<br />
&nbsp;&nbsp; }<br />
}<br />
<br />
class </span><span class="default">B </span><span class="keyword">extends </span><span class="default">A</span><span class="keyword">{<br />
&nbsp;&nbsp; function </span><span class="default">B</span><span class="keyword">(){<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">A</span><span class="keyword">();<br />
&nbsp;&nbsp; }<br />
}<br />
<br />
</span><span class="default">$object1 </span><span class="keyword">= new </span><span class="default">A</span><span class="keyword">();<br />
</span><span class="default">$object2 </span><span class="keyword">= new </span><span class="default">B</span><span class="keyword">();<br />
</span><span class="default">?&gt;<br />
</span><br />
When u run this code-snippet the output will be:<br />
<br />
Object is an instance of class A which is the parent-class.<br />
Object is an instance of class B which is the child-class.</span>
</code></div>
  </div>
 </div>
 <a name="35349"></a>
 <div class="note">
  <strong>ar at 5mm de</strong><br />
  <a href="#35349">28-Aug-2003 07:59</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I missed some kind of function to dynamicly override or extend an Object:<br />
<br />
-----------------------------------------<br />
function &amp;extendObj(&amp;$obj, $code) {<br />
&nbsp;&nbsp;&nbsp; static $num = 0;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; $classname = get_class($obj);<br />
&nbsp;&nbsp;&nbsp; $newclass = $classname.$num; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; eval('class '.$newclass.' extends '.$classname.' { '.$code.' }');<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; $newobj = new $newclass();<br />
<br />
&nbsp;&nbsp;&nbsp; $vars = get_class_vars($classname);<br />
&nbsp;&nbsp;&nbsp; foreach($vars AS $key=&gt;$value) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $newobj-&gt;$key = &amp;$obj-&gt;$key;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; return $newobj;<br />
}<br />
-----------------------------------------<br />
<br />
This creates a new class which extends the old one by the given code parameter, instanciates it and copy all vars from the old obj to the new one.<br />
<br />
-----------------------------------------<br />
class testA {<br />
&nbsp;&nbsp;&nbsp; var $prop = 'a';<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function funcA($val) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;prop = $val;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function value() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return $this-&gt;prop;<br />
&nbsp;&nbsp;&nbsp; } <br />
}<br />
<br />
$obj = new testA();<br />
<br />
$newobj = &amp;extendObj(&amp;$obj, 'function addX() { $this-&gt;prop .= "x"; }');<br />
<br />
$newobj-&gt;funcA('abc');<br />
$newobj-&gt;addX();<br />
echo $newobj-&gt;value();<br />
-----------------------------------------<br />
<br />
Results in 'abcx'. You can use the function multiple times and also with class variables. Be carefull, even if $newobj is just a copy of $obj, $obj-&gt;value() will return 'abcx', too, because of the &amp; operator: $newobj-&gt;$key = &amp;$obj-&gt;$key;</span>
</code></div>
  </div>
 </div>
 <a name="33809"></a>
 <div class="note">
  <strong>zidsu at hotmail dot com</strong><br />
  <a href="#33809">08-Jul-2003 05:24</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
FYI: if you want to split your class into manageble chunks, what means different files for you, you can put you functoins into includes, and make include() have a return value. Like this:<br />
<br />
class Some_class {<br />
&nbsp; var $value = 3;<br />
&nbsp; function add_value ($input_param) {<br />
&nbsp;&nbsp;&nbsp; return include ("path/some_file.php");<br />
&nbsp; }<br />
}<br />
<br />
And your included file:<br />
<br />
$input_param += $this-&gt;value;<br />
return $input_param;<br />
<br />
Then your function call will be:<br />
<br />
$instance = new Some_class ();<br />
$instance-&gt;add_value (3);<br />
<br />
And this will return<br />
6<br />
hopefully :P<br />
<br />
Keep in mind though, that the scope in the included file will be identical to the scope the function 'add_value' has.<br />
And if you want to return the outcome, you should also have a return statement made in your include as well.</span>
</code></div>
  </div>
 </div>
 <a name="25372"></a>
 <div class="note">
  <strong>asommer*at*as-media.com</strong><br />
  <a href="#25372">20-Sep-2002 02:52</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Something I found out just now that comes in very handy for my current project:<br />
<br />
it is possible to have a class override itself in any method ( including the constructor ) like this:<br />
<br />
class a {<br />
<br />
..function ha ( ) {<br />
....if ( $some_expr ) {<br />
......$this = new b;<br />
......return $this-&gt;ha ( );<br />
....}<br />
....return $something;<br />
..}<br />
<br />
}<br />
<br />
in this case assuming that class b is already defined and also has the method ha ( )<br />
<br />
note that the code after the statement to override itself is still executed but now applies to the new class<br />
<br />
i did not find any information about this behaviour anywhere, so i have no clue wether this is supposed to be like this and if it might change... but it opens a few possibilities in flexible scripting!!</span>
</code></div>
  </div>
 </div>
 <a name="25215"></a>
 <div class="note">
  <strong>einhverfr at not-this-host dot hotmail dot com</strong><br />
  <a href="#25215">14-Sep-2002 12:35</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
You may find it helpful in complex projects to have namespaces for your classes, and arrange these in a hierarchical manner.&nbsp;&nbsp; A simple way to do this is to use the filesystem to order your hierarchies and then define a function like this:<br />
<br />
function use_namespace($namespace){<br />
<br />
require_once("namespaces/$namespace.obj.php");<br />
<br />
}<br />
<br />
(lack of indentation due to HTML UI for this page)<br />
This requires that all your object libraries end in .obj.php (which I use) but you can modfy it to suit your needs.&nbsp; To call it you could, for exmaple call:<br />
<br />
use_namespace("example");<br />
or if foo is part of example you can call:<br />
use_namespace("example/foo");</span>
</code></div>
  </div>
 </div>
 <a name="24491"></a>
 <div class="note">
  <strong>justin at quadmyre dot com</strong><br />
  <a href="#24491">19-Aug-2002 09:38</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If you want to be able to call an instance of a class from within another class, all you need to do is store a reference to the external class as a property of the local class (can use the constructor to pass this to the class), then call the external method like this:<br />
<br />
$this-&gt;classref-&gt;memberfunction($vars);<br />
<br />
or if the double '-&gt;' is too freaky for you, how about:<br />
<br />
$ref=&amp;$this-&gt;classref;<br />
$ref-&gt;memberfunction($vars);<br />
<br />
This is handy if you write something like a general SQL class that you want member functions in other classes to be able to use, but want to keep namespaces separate. Hope that helps someone.<br />
<br />
Justin<br />
<br />
Example:<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">class </span><span class="default">class1 </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">test</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$result </span><span class="keyword">= </span><span class="default">$var </span><span class="keyword">+ </span><span class="default">2</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">$result</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
class </span><span class="default">class2</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$ref_to_class</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">; </span><span class="comment"># to be pointer to other class<br />
<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">class1</span><span class="keyword">(&amp;</span><span class="default">$ref</span><span class="keyword">){ </span><span class="comment">#constructor<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">ref_to_class</span><span class="keyword">=</span><span class="default">$ref</span><span class="keyword">; </span><span class="comment">#save ref to other class as property of this class<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">}<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">test2</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$val </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">ref_to_class</span><span class="keyword">-&gt;</span><span class="default">test</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">); </span><span class="comment">#call other class using ref<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">return </span><span class="default">$val</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
</span><span class="default">$obj1</span><span class="keyword">=new </span><span class="default">class1</span><span class="keyword">;<br />
</span><span class="comment"># obj1 is instantiated.<br />
</span><span class="default">$obj2</span><span class="keyword">=new </span><span class="default">class2</span><span class="keyword">(</span><span class="default">$obj1</span><span class="keyword">);<br />
</span><span class="comment"># pass ref to obj1 when instantiating obj2<br />
<br />
</span><span class="default">$var</span><span class="keyword">=</span><span class="default">5</span><span class="keyword">;<br />
</span><span class="default">$result</span><span class="keyword">=</span><span class="default">obj2</span><span class="keyword">-&gt;</span><span class="default">test2</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">);<br />
</span><span class="comment"># call method in obj2, which calls method in obj1<br />
</span><span class="keyword">echo (</span><span class="default">$result</span><span class="keyword">);<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="11810"></a>
 <div class="note">
  <strong>gateschris at yahoo dot com</strong><br />
  <a href="#11810">08-Mar-2001 01:59</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
[Editor's note: If you are trying to do overriding, then you can just interrogate (perhaps in the method itself) about what class (get_class()) the object belongs to, or if it is a subclass of a particular root class.<br />
<br />
You can alway refer to the parent overriden method, see the "Classes and Objects" page of the manual and comments/editor's notes therein.]<br />
<br />
There is no function to determine if a member belongs to a base class or current class eg:<br />
<br />
class foo {<br />
&nbsp;function foo () { }<br />
&nbsp;function a () { }<br />
}<br />
<br />
class bar extends foo {<br />
&nbsp;function bar () { }<br />
&nbsp;function a () { }<br />
}<br />
<br />
lala = new Bar();<br />
------------------<br />
how do we find programmatically if member a now belongs to class Bar or Foo.</span>
</code></div>
  </div>
 </div>
 <div class="foot"><a href="/manual/add-note.php?sect=ref.classobj&amp;redirect=http://www.php.net/manual/en/ref.classobj.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.classobj&amp;redirect=http://www.php.net/manual/en/ref.classobj.php">add a note</a></small></div>
</div><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.call-user-method-array.php">call_user_method_array<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.classobj.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />Classes/Objects</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


 </div>
 <div class="cleaner">&nbsp;</div>
</div>

<div id="footnav">
   <a href="/source.php?url=/manual/en/ref.classobj.php">show source</a> |
 <a href="/credits.php">credits</a> |
 <a href="/stats/">stats</a> |
 <a href="/sitemap.php">sitemap</a> |
 <a href="/contact.php">contact</a> |
 <a href="/contact.php#ads">advertising</a> |
 <a href="/mirrors.php">mirror sites</a>
</div>

<div id="pagefooter">
 <div id="copyright">
  <a href="/copyright.php">Copyright &copy; 2001-2008 The PHP Group</a><br />
  All rights reserved.
 </div>

 <div id="thismirror">
  <a href="/mirror.php">This mirror</a> generously provided by:
  <a href="http://developer.yahoo.com/">Yahoo! Inc.</a><br />
  Last updated: Wed Apr 16 05:27:53 2008 PDT
 </div>
</div>

</body>
</html>