<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://purl.org/NET/erdf/profile">
 <title>PHP: XML Parser Functions - Manual</title>
 <style type="text/css" media="all">
  @import url("http://static.php.net/www.php.net/styles/site.css");
  @import url("http://static.php.net/www.php.net/styles/phpnet.css");
 </style>
 <!--[if IE]><![if gte IE 6]><![endif]-->
  <style type="text/css" media="print">
   @import url("http://static.php.net/www.php.net/styles/print.css");
  </style>
 <!--[if IE]><![endif]><![endif]-->
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
 <link rel="shortcut icon" href="http://static.php.net/www.php.net/favicon.ico" />
 <link rel="contents" href="index.php" />
 <link rel="index" href="book.xml.php" />
 <link rel="prev" href="book.xml.php" />
 <link rel="next" href="function.utf8-decode.php" />
 <link rel="schema.dc" href="http://purl.org/dc/elements/1.1/" />
 <link rel="schema.rdfs" href="http://www.w3.org/2000/01/rdf-schema#" />
 <script type="text/javascript" src="http://static.php.net/www.php.net/userprefs.js"></script>
 <base href="http://www.php.net/manual/en/ref.xml.php" />
</head>
<body>

<div id="headnav">
 <a href="/" rel="home"><img src="http://static.php.net/www.php.net/images/php.gif"
 alt="PHP" width="120" height="67" /></a>
 <div id="headmenu">
  <a href="/downloads.php">downloads</a> |
  <a href="/docs.php">documentation</a> |
  <a href="/FAQ.php">faq</a> |
  <a href="/support.php">getting help</a> |
  <a href="/mailing-lists.php">mailing lists</a> |
  <a href="http://bugs.php.net/">reporting bugs</a> |
  <a href="/sites.php">php.net sites</a> |
  <a href="/links.php">links</a> |
  <a href="/conferences/">conferences</a> |
  <a href="/my.php">my php.net</a>
 </div>
</div>

<div id="headsearch">
 <form method="post" action="/search.php" id="topsearch">
  <p>
   <span title="Keyboard shortcut: Alt+S (Win), Ctrl+S (Apple)">
    <span class="shortkey">s</span>earch for
   </span>
   <input type="text" name="pattern" value="" size="30" accesskey="s" />
   <span>in the</span>
   <select name="show">
    <option value="quickref" selected="selected">function list</option>
    <option value="all"      >all php.net sites</option>
    <option value="local"    >this mirror only</option>
    <option value="manual"   >online documentation</option>
    <option value="bugdb"    >bug database</option>
    <option value="news_archive">Site News Archive</option>
    <option value="changelogs">All Changelogs</option>
    <option value="pear"     >just pear.php.net</option>
    <option value="pecl"     >just pecl.php.net</option>
    <option value="talks"    >just talks.php.net</option>
    <option value="maillist" >general mailing list</option>
    <option value="devlist"  >developer mailing list</option>
    <option value="phpdoc"   >documentation mailing list</option>
   </select>
   <input type="image"
          src="http://static.php.net/www.php.net/images/small_submit_white.gif"
          class="submit" alt="search" />
   <input type="hidden" name="lang" value="en" />
  </p>
 </form>
</div>

<div id="layout_2">
 <div id="leftbar">
<!--UdmComment-->
<ul class="toc">
 <li class="header home"><a href="index.php">PHP Manual</a></li>
 <li class="header up"><a href="funcref.php">Function Reference</a></li>
 <li class="header up"><a href="refs.xml.php">XML Manipulation</a></li>
 <li class="header up"><a href="book.xml.php">XML Parser</a></li>
 <li><a href="intro.xml.php">Introduction</a></li>
 <li><a href="xml.setup.php">Installing/Configuring</a></li>
 <li><a href="xml.constants.php">Predefined Constants</a></li>
 <li><a href="xml.eventhandlers.php">Event Handlers</a></li>
 <li><a href="xml.case-folding.php">Case Folding</a></li>
 <li><a href="xml.error-codes.php">Error Codes</a></li>
 <li><a href="xml.encoding.php">Character Encoding</a></li>
 <li><a href="xml.examples.php">Examples</a></li>
 <li class="active"><a href="ref.xml.php">XML Parser Functions</a></li>
</ul><!--/UdmComment-->

 </div>
 <div id="content" class="manual/en">
<!--UdmComment-->
<div class="manualnavbar manualnavbar_top">
 <span class="next">
  <a href="function.utf8-decode.php">utf8_decode<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.xml.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />XML Parser</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  <form action="/manual/change.php" method="get">
   <p>view this page in </p><fieldset><select name="page">
    <option value="bg/ref.xml.php">Bulgarian</option>
    <option value="pt_BR/ref.xml.php">Brazilian Portuguese</option>
    <option value="fr/ref.xml.php">French</option>
    <option value="de/ref.xml.php">German</option>
    <option value="it/ref.xml.php">Italian</option>
    <option value="ja/ref.xml.php">Japanese</option>
    <option value="pl/ref.xml.php">Polish</option>
    <option value="ro/ref.xml.php">Romanian</option>
    <option value="ru/ref.xml.php">Russian</option>
    <option value="es/ref.xml.php">Spanish</option>
    <option value="help-translate.php">Other</option>
   </select>
   <input type="image" src="http://static.php.net/www.php.net/images/small_submit.gif" id="changeLangImage" alt="" />
  </fieldset></form>
 </div>
</div>
<!--/UdmComment-->

<div>
 <h1 class="title">XML Parser Functions</h1>

 

















































































































































<h2>Table of Contents</h2><ul class="chunklist chunklist_reference"><li><a href="function.utf8-decode.php">utf8_decode</a> — Converts a string with ISO-8859-1 characters encoded with UTF-8
   to single-byte ISO-8859-1</li><li><a href="function.utf8-encode.php">utf8_encode</a> — Encodes an ISO-8859-1 string to UTF-8</li><li><a href="function.xml-error-string.php">xml_error_string</a> — Get XML parser error string</li><li><a href="function.xml-get-current-byte-index.php">xml_get_current_byte_index</a> — Get current byte index for an XML parser</li><li><a href="function.xml-get-current-column-number.php">xml_get_current_column_number</a> — Get current column number for an XML parser</li><li><a href="function.xml-get-current-line-number.php">xml_get_current_line_number</a> — Get current line number for an XML parser</li><li><a href="function.xml-get-error-code.php">xml_get_error_code</a> — Get XML parser error code</li><li><a href="function.xml-parse-into-struct.php">xml_parse_into_struct</a> — Parse XML data into an array structure</li><li><a href="function.xml-parse.php">xml_parse</a> — Start parsing an XML document</li><li><a href="function.xml-parser-create-ns.php">xml_parser_create_ns</a> — Create an XML parser with namespace support</li><li><a href="function.xml-parser-create.php">xml_parser_create</a> — Create an XML parser</li><li><a href="function.xml-parser-free.php">xml_parser_free</a> — Free an XML parser</li><li><a href="function.xml-parser-get-option.php">xml_parser_get_option</a> — Get options from an XML parser</li><li><a href="function.xml-parser-set-option.php">xml_parser_set_option</a> — Set options in an XML parser</li><li><a href="function.xml-set-character-data-handler.php">xml_set_character_data_handler</a> — Set up character data handler</li><li><a href="function.xml-set-default-handler.php">xml_set_default_handler</a> — Set up default handler</li><li><a href="function.xml-set-element-handler.php">xml_set_element_handler</a> — Set up start and end element handlers</li><li><a href="function.xml-set-end-namespace-decl-handler.php">xml_set_end_namespace_decl_handler</a> — Set up end namespace declaration handler</li><li><a href="function.xml-set-external-entity-ref-handler.php">xml_set_external_entity_ref_handler</a> — Set up external entity reference handler</li><li><a href="function.xml-set-notation-decl-handler.php">xml_set_notation_decl_handler</a> — Set up notation declaration handler</li><li><a href="function.xml-set-object.php">xml_set_object</a> — Use XML Parser within an object</li><li><a href="function.xml-set-processing-instruction-handler.php">xml_set_processing_instruction_handler</a> — Set up processing instruction (PI) handler</li><li><a href="function.xml-set-start-namespace-decl-handler.php">xml_set_start_namespace_decl_handler</a> — Set up start namespace declaration handler</li><li><a href="function.xml-set-unparsed-entity-decl-handler.php">xml_set_unparsed_entity_decl_handler</a> — Set up unparsed entity declaration handler</li></ul>
</div>
<br /><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.utf8-decode.php">utf8_decode<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.xml.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />XML Parser</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


<div id="usernotes">
 <div class="head">
  <span class="action"><a href="/manual/add-note.php?sect=ref.xml&amp;redirect=http://www.php.net/manual/en/ref.xml.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.xml&amp;redirect=http://www.php.net/manual/en/ref.xml.php">add a note</a></small></span>
  <small>User Contributed Notes</small><br />
  <strong>XML Parser Functions</strong>
 </div>
 <a name="82263"></a>
 <div class="note">
  <strong>shawn dot rapp at gmail dot com</strong><br />
  <a href="#82263">03-Apr-2008 12:24</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Well I posted my script with an example fread($fp, 4096) meaning that it will only read 4k.&nbsp; It was just for a quick example.&nbsp; If you used that to input data from a really long XML file to the parser that would be the problem.<br />
you could replace the 4096 with filesize("file.xml") or try replacing that example test code part with:<br />
<br />
$xml = implode('',file("<a href="http://localhost/test.xml" target="_blank">http://localhost/test.xml</a>"));<br />
$xml_parser = new XML_Class();<br />
$xml_parser-&gt;parse($xml);<br />
print_r($xml_parser-&gt;dom);<br />
<br />
I've tried to recreate your problems by posting entire howto of installing LDAP into character data space of a node and can't get it to fail.&nbsp; Please email with more info if the above isn't the problem.<br />
But on that routine you posted from that website.&nbsp; The problem with that one is it seems to be padding with unnecessary arrays.&nbsp; It will overwrite different nodes with the same name if they are within the same parent.&nbsp; And the number one biggest issue for me is that it drops attributes.&nbsp; That is totally bogus.&nbsp; It's a lot cleaner to store most values in attributes than making a zillion nodes and storing the data for something small like a integer or a float as character data.<br />
Example:&nbsp; <br />
&lt;coords x="1.53234" y="56.287" z="4.32" /&gt;<br />
VS<br />
&lt;coords&gt;&lt;x&gt;1.53234&lt;/x&gt;&lt;y&gt;56.287&lt;/y&gt;&lt;z&gt;4.32&lt;/z&gt;&lt;/coords&gt;<br />
<br />
To me the top is very readable where the later makes my eyes bleed.<br />
Any ways what is good about the links code is the error checking.&nbsp; Isolating all the code in the parse method instead of constructor so the object is recyclable. And than releases the xml parser.<br />
I'm definitely going to be putting that stuff into my class after I post this note.<br />
&nbsp;<br />
But let me know if its still truncating.</span>
</code></div>
  </div>
 </div>
 <a name="81910"></a>
 <div class="note">
  <strong>shawn dot rapp at gmail dot com</strong><br />
  <a href="#81910">18-Mar-2008 07:52</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The reason why you would want to make your own simplistic DOM parser is because a lack of compatible between PHP 4's domxml and PHP 5's dom.<br />
So it is for portability without having to wrapper the two different DOMs.<br />
If you need a simple light weight XML parser that is portable this is the best way.&nbsp; If you are writing applications for a particular server and more concerned with functionality and speed go with a compiled in DOM.<br />
Here is the fix to Emmetts code...<br />
<br />
<span class="default">&lt;?PHP<br />
$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="string">"test.xml"</span><span class="keyword">,</span><span class="string">"r"</span><span class="keyword">);<br />
</span><span class="default">$xml </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">4096</span><span class="keyword">);<br />
</span><span class="default">fclose</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">);<br />
</span><span class="default">$xml_parser </span><span class="keyword">= new </span><span class="default">xml</span><span class="keyword">();<br />
</span><span class="default">$xml_parser</span><span class="keyword">-&gt;</span><span class="default">parse</span><span class="keyword">(</span><span class="default">$xml</span><span class="keyword">);<br />
</span><span class="default">$dom </span><span class="keyword">= </span><span class="default">$xml_parser</span><span class="keyword">-&gt;</span><span class="default">dom</span><span class="keyword">;<br />
</span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$dom</span><span class="keyword">);<br />
<br />
class </span><span class="default">xml&nbsp; </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$parser</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$pointer</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$dom</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">xml</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">dom</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">XML_OPTION_CASE_FOLDING</span><span class="keyword">, </span><span class="default">false</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">"tag_open"</span><span class="keyword">, </span><span class="string">"tag_close"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">"cdata"</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">makeChildNode</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">])){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">] = array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">]);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_open</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">, </span><span class="default">$attributes</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$idx </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">makeChildNode</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">][</span><span class="default">$idx</span><span class="keyword">] = Array(<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'_idx' </span><span class="keyword">=&gt; </span><span class="default">$idx</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'_parent' </span><span class="keyword">=&gt; &amp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'tag_name' </span><span class="keyword">=&gt; </span><span class="default">$tag</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'attributes' </span><span class="keyword">=&gt; </span><span class="default">$attributes</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; );<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">][</span><span class="default">$idx</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">cdata</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$cdata</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="comment">//drop text nodes that are just white space formatting characters<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">if (</span><span class="default">trim</span><span class="keyword">(</span><span class="default">$cdata</span><span class="keyword">) != </span><span class="string">""</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$idx </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">makeChildNode</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">][</span><span class="default">$idx</span><span class="keyword">] = </span><span class="default">$cdata</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_close</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$idx </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'_idx'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'_parent'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; unset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">][</span><span class="default">$idx</span><span class="keyword">][</span><span class="string">'_idx'</span><span class="keyword">]);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; unset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'child_nodes'</span><span class="keyword">][</span><span class="default">$idx</span><span class="keyword">][</span><span class="string">'_parent'</span><span class="keyword">]);<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="81647"></a>
 <div class="note">
  <strong>jesdisciple at gmail dot com</strong><br />
  <a href="#81647">07-Mar-2008 02:00</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
@[emmett dot thesane at yahoo dot com]: That code didn't work for me, but it seems that using the DOM functions (<a href="http://php.net/manual/en/ref.dom.php" target="_blank">http://php.net/manual/en/ref.dom.php</a>) would be more efficient.</span>
</code></div>
  </div>
 </div>
 <a name="79744"></a>
 <div class="note">
  <strong>emmett dot thesane at yahoo dot com</strong><br />
  <a href="#79744">10-Dec-2007 04:19</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
There's a couple of vital flaws in aquariusrick's example:<br />
1. Multiple tags of the same name will overwrite one another.<br />
2. Text nodes within an element are all strung together, with no information saved regarding their order with respect to non-text nodes.<br />
<br />
It provided a good starting point, however, for a DOM-builder that *does* allow those things.&nbsp; This should be a more familiar structure for people used to DOM-walking in the browser; children of each node are stored in "childNodes". Text nodes are simply a child node that is only a string, instead of an array.<br />
<br />
$xml_parser = new xml();<br />
$xml_parser-&gt;parse($xml);<br />
$dom = $xml_parser-&gt;dom;<br />
print_r($dom);<br />
<br />
class xml&nbsp; {<br />
&nbsp;&nbsp;&nbsp; var $parser;<br />
&nbsp;&nbsp;&nbsp; var $pointer;<br />
&nbsp;&nbsp;&nbsp; var $dom;<br />
&nbsp;&nbsp;&nbsp; function xml() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer =&amp; $this-&gt;dom;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;parser = xml_parser_create();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xml_set_object($this-&gt;parser, $this);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xml_parser_set_option($this-&gt;parser, XML_OPTION_CASE_FOLDING, false);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xml_set_element_handler($this-&gt;parser, "tag_open", "tag_close");<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xml_set_character_data_handler($this-&gt;parser, "cdata");<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function parse($data) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xml_parse($this-&gt;parser, $data);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function makeChildNode() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!isset($this-&gt;pointer['childNodes'])){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer['childNodes'] = array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return count($this-&gt;pointer['childNodes']);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function tag_open($parser, $tag, $attributes) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $idx = $this-&gt;makeChildNode();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer['childNodes'][$idx] = Array(<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; '_idx' =&gt; $idx,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'tagName' =&gt; $tag,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'parentNode' =&gt; &amp;$this-&gt;pointer,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'attributes' =&gt; $attributes,<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; );<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer =&amp; $this-&gt;pointer['childNodes'][$idx];<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function cdata($parser, $cdata) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $idx = $this-&gt;makeChildNode();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer['childNodes'][$idx] = $cdata;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; //text node -- has no other attributes than the content<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function tag_close($parser, $tag) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $idx =&amp; $this-&gt;pointer['_idx'];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;pointer =&amp; $this-&gt;pointer['_parent'];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; unset($this-&gt;pointer['childNodes'][$idx]['_idx']);<br />
&nbsp;&nbsp;&nbsp; }<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="79630"></a>
 <div class="note">
  <strong>aquariusrick</strong><br />
  <a href="#79630">05-Dec-2007 08:43</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here's another attempt at a very simple script that parses XML into a structure:<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="comment">#Usage:<br />
&nbsp;&nbsp;&nbsp; //$xml_parser = new xml();<br />
&nbsp;&nbsp;&nbsp; //$xml_parser-&gt;parse($xml);<br />
&nbsp;&nbsp;&nbsp; //$dom = $xml_parser-&gt;dom;<br />
<br />
</span><span class="keyword">class </span><span class="default">xml&nbsp; </span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$parser</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$pointer</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$dom</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">xml</span><span class="keyword">() {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">dom</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">XML_OPTION_CASE_FOLDING</span><span class="keyword">, </span><span class="default">false</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">"tag_open"</span><span class="keyword">, </span><span class="string">"tag_close"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">"cdata"</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_open</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">, </span><span class="default">$attributes</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">] = Array(<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'_parent'&nbsp;&nbsp; </span><span class="keyword">=&gt; &amp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'_content'&nbsp; </span><span class="keyword">=&gt; </span><span class="default">null</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="string">'_attributes' </span><span class="keyword">=&gt; </span><span class="default">$attributes</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; );<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">cdata</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$cdata</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'_content'</span><span class="keyword">] .= </span><span class="default">$cdata</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_close</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="string">'_parent'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; unset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">pointer</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">][</span><span class="string">'_parent'</span><span class="keyword">]);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
} </span><span class="comment">// end xml class<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="79397"></a>
 <div class="note">
  <strong>yousuf at philipz dot com</strong><br />
  <a href="#79397">24-Nov-2007 11:53</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is my modification of &lt; dmeekins att gmail doot com &gt; XMLParser class, as i have used it for quite a bit. There were 2 problems with his post, which of course was a modification of an earlier post, so the problem continued through the many versions. The problems were in the dataHandler function. The first problem was with '$data = trim($data);' which removed line breakers from data which went over many lines and the second problem was when a tag had a value 0. So here is the corrected function.<br />
<br />
<span class="default">&lt;?php<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">dataHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!empty(</span><span class="default">$data</span><span class="keyword">) || </span><span class="default">strval</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">) != </span><span class="string">"" </span><span class="keyword">)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(isset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">]))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">] .= </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">] = </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
</span><span class="default">?&gt;<br />
</span><br />
By removing '$data = trim($data);', you will notice that some [data] elements, mainly the root ones, will have alot of line breakers in them with no actual data.<br />
<br />
The code by &lt; geoffers [at] gmail [dot] com &gt; was also quite good as it keeps things alot smaller than XMLParser and here's my modification of part of his code, as i preferred to have it look similar to how XMLParser has it (removes the ['child'] entry and changes 'attribs' to 'attr').<br />
<br />
<span class="default">&lt;?php<br />
&nbsp;&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">(</span><span class="string">'UTF-8'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">XML_OPTION_SKIP_WHITE</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'tag_open'</span><span class="keyword">, </span><span class="string">'tag_close'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'cdata'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_code </span><span class="keyword">= </span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_string </span><span class="keyword">= </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_code</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">current_line </span><span class="keyword">= </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">current_column </span><span class="keyword">= </span><span class="default">xml_get_current_column_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_open</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">, </span><span class="default">$attribs</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">][] = array(</span><span class="string">'data' </span><span class="keyword">=&gt; </span><span class="string">''</span><span class="keyword">, </span><span class="string">'attr' </span><span class="keyword">=&gt; </span><span class="default">$attribs</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">datas</span><span class="keyword">[] =&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">][</span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="default">$tag</span><span class="keyword">])-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; }<br />
</span><span class="default">?&gt;<br />
</span><br />
The code by &lt; adamaflynn at criticaldevelopment dot net &gt; and &lt; geoff at spacevs dot com &gt; are also quite good but use xmlObject object rather than standard arrays.</span>
</code></div>
  </div>
 </div>
 <a name="79043"></a>
 <div class="note">
  <strong>geoff at spacevs dot com</strong><br />
  <a href="#79043">07-Nov-2007 09:13</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Reading xml into a class:<br />
<br />
<span class="default">&lt;?PHP<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">class </span><span class="default">XmlData </span><span class="keyword">{}<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$elements </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$elements</span><span class="keyword">[] =&amp; new </span><span class="default">XmlData</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; function </span><span class="default">startElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attrs</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; global </span><span class="default">$elements</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$element </span><span class="keyword">=&amp; new </span><span class="default">XMLData</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$elements</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$elements</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">$name </span><span class="keyword">=&amp; </span><span class="default">$element</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$elements</span><span class="keyword">[] =&amp; </span><span class="default">$element</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; function </span><span class="default">endElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; global </span><span class="default">$elements</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$elements</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; function </span><span class="default">characterData</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; global </span><span class="default">$elements</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$elements</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$elements</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">data </span><span class="keyword">= </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$xml_parser&nbsp; &nbsp;&nbsp; </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$xml_parser</span><span class="keyword">, </span><span class="string">"startElement"</span><span class="keyword">, </span><span class="string">"endElement"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$xml_parser</span><span class="keyword">, </span><span class="string">"characterData"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$xml_parser</span><span class="keyword">, </span><span class="default">$xml</span><span class="keyword">, </span><span class="default">true</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$xml_parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$request </span><span class="keyword">=&amp; </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$elements</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; echo </span><span class="default">$request</span><span class="keyword">-&gt;</span><span class="default">LOGIN</span><span class="keyword">-&gt;</span><span class="default">USER</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="78678"></a>
 <div class="note">
  <strong>demonpants at gmail dot com</strong><br />
  <a href="#78678">22-Oct-2007 08:59</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I wanted to access the ISBN database, and was previously parsing the HTML string generated from their main page, that is until I discovered they have an API that returns XML.<br />
<br />
So, if anyone wants to get some information from the ISBN database, all you need to do is the following.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="comment">//Search the ISBN database for the book.<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$url </span><span class="keyword">= </span><span class="string">"<a href="http://www.isbndb.com/api/books.xml?" target="_blank">http://www.isbndb.com/api/books.xml?</a> access_key=KEY&amp;index1=isbn&amp;value1=$_GET[ISBN]"</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$p </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parse_into_struct</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">,</span><span class="default">file_get_contents</span><span class="keyword">(</span><span class="default">$url</span><span class="keyword">),</span><span class="default">$results</span><span class="keyword">,</span><span class="default">$index</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$title </span><span class="keyword">= </span><span class="default">$results</span><span class="keyword">[</span><span class="default">$index</span><span class="keyword">[</span><span class="default">TITLELONG</span><span class="keyword">][</span><span class="default">0</span><span class="keyword">]][</span><span class="default">value</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$author </span><span class="keyword">= </span><span class="default">$results</span><span class="keyword">[</span><span class="default">$index</span><span class="keyword">[</span><span class="default">AUTHORSTEXT</span><span class="keyword">][</span><span class="default">0</span><span class="keyword">]][</span><span class="default">value</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$publisher </span><span class="keyword">= </span><span class="default">$results</span><span class="keyword">[</span><span class="default">$index</span><span class="keyword">[</span><span class="default">PUBLISHERTEXT</span><span class="keyword">][</span><span class="default">0</span><span class="keyword">]][</span><span class="default">value</span><span class="keyword">];<br />
</span><span class="default">?&gt;<br />
</span><br />
You will need to get an access key from isbndb.com, but it takes two seconds and is free. When you get it, replace KEY in the URL with your own key. Also, my code above will search for the book that fits the ISBN number stored in the GET variable ISBN - you can search by other parameters and return more than one result, but my example is&nbsp; for a simple ISBN search.</span>
</code></div>
  </div>
 </div>
 <a name="78493"></a>
 <div class="note">
  <strong>TeerachaiJ at GMail dot com</strong><br />
  <a href="#78493">15-Oct-2007 02:17</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I enhance xml2array (can't remember who author) to work with duplicate key index by change "tagData" function with this -&gt;<br />
<br />
&lt;?<br />
&nbsp; function tagData($parser, $tagData) {&nbsp;&nbsp; <br />
<br />
&nbsp;&nbsp;&nbsp; // set the latest open tag equal to the tag data<br />
<br />
&nbsp;&nbsp;&nbsp; $strEval = "\$this-&gt;arrOutput";<br />
&nbsp;&nbsp;&nbsp; foreach ($this-&gt;arrName as $value) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; $strEval .= "[" . $value . "]";<br />
&nbsp;&nbsp; &nbsp;&nbsp; $arr .= "[" . $value . "]";&nbsp; &nbsp; &nbsp; &nbsp; //*Enhance by T•J (array when dup)<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; eval("\$x=\$this-&gt;arrOutput" . $arr . ";");&nbsp; &nbsp; &nbsp; &nbsp; //*Enhance by T•J (array when dup)<br />
&nbsp;&nbsp;&nbsp; if($x) { $strEval = $strEval . "[" . ++$this-&gt;arrOutput[$arr] . "] = \$tagData;"; }&nbsp; &nbsp; &nbsp; &nbsp; //*Enhance by T•J (array when dup)<br />
&nbsp;&nbsp; &nbsp; else { $strEval = $strEval . " = \$tagData;"; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; eval ($strEval);<br />
&nbsp; }<br />
?&gt;<br />
<br />
I not sure have another do it now.<br />
Hope!!! It will help your work.</span>
</code></div>
  </div>
 </div>
 <a name="77700"></a>
 <div class="note">
  <strong>Zvjezdan Patz</strong><br />
  <a href="#77700">09-Sep-2007 08:22</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The problem I had was I needed to generate xml on the screen for users to actually see and copy to a file.&nbsp; <br />
<br />
I'm generating the xml manually from a php file and the browser kept interpreting the xml...not very helpful.&nbsp; <br />
<br />
This is how you get around it:<br />
<br />
&lt;?<br />
<br />
$file&nbsp; = file_get_contents("<a href="http://fileurl/xml.php?whatever=$whatever" target="_blank">http://fileurl/xml.php?whatever=$whatever</a>");<br />
print nl2br(htmlentities($file));<br />
<br />
?&gt; <br />
<br />
Prints all my xml quite nicely.</span>
</code></div>
  </div>
 </div>
 <a name="76417"></a>
 <div class="note">
  <strong>v9 at fakehalo dot us</strong><br />
  <a href="#76417">13-Jul-2007 08:04</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I needed this for work/personal use.&nbsp; Sometimes you'll have a XML string generated as one long string and no line breaks...nusoap in the case of today/work, but there are any other number of possible things that will generate these.&nbsp; Anyways, this simply takes a long XML string and returns an indented/line-breaked version of the string for display/readability.<br />
<br />
&lt;?<br />
function xmlIndent($str){<br />
&nbsp;&nbsp;&nbsp; $ret = "";<br />
&nbsp;&nbsp;&nbsp; $indent = 0;<br />
&nbsp;&nbsp;&nbsp; $indentInc = 3;<br />
&nbsp;&nbsp;&nbsp; $noIndent = false;<br />
&nbsp;&nbsp;&nbsp; while(($l = strpos($str,"&lt;",$i))!==false){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($l!=$r &amp;&amp; $indent&gt;0){ $ret .= "\n" . str_repeat(" ",$indent) . substr($str,$r,($l-$r)); }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $i = $l+1;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $r = strpos($str,"&gt;",$i)+1;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $t = substr($str,$l,($r-$l));<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(strpos($t,"/")==1){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $indent -= $indentInc;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $noIndent = true;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else if(($r-$l-strpos($t,"/"))==2 || substr($t,0,2)=="&lt;?"){ $noIndent = true; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($indent&lt;0){ $indent = 0; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($ret){ $ret .= "\n"; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $ret .= str_repeat(" ",$indent);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $ret .= $t;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!$noIndent){ $indent += $indentInc; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $noIndent = false;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; $ret .= "\n";<br />
&nbsp;&nbsp;&nbsp; return($ret);<br />
}<br />
?&gt;<br />
<br />
(...this was only tested for what i needed at work, could POSSIBLY need additions)</span>
</code></div>
  </div>
 </div>
 <a name="75623"></a>
 <div class="note">
  <strong>ricardo at sismeiro dot com</strong><br />
  <a href="#75623">08-Jun-2007 04:29</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
<span class="default">&lt;?php<br />
<br />
</span><span class="comment">/**<br />
&nbsp;* correction of the previous code<br />
&nbsp;*/<br />
<br />
/**<br />
&nbsp;* Converts XML into Array <br />
&nbsp;*<br />
&nbsp;* @param array $result<br />
&nbsp;* @param object&nbsp; $root<br />
&nbsp;* @param string $rootname<br />
&nbsp;*/<br />
</span><span class="keyword">function </span><span class="default">convert_xml2array</span><span class="keyword">(&amp;</span><span class="default">$result</span><span class="keyword">,</span><span class="default">$root</span><span class="keyword">,</span><span class="default">$rootname</span><span class="keyword">=</span><span class="string">'root'</span><span class="keyword">){<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$n</span><span class="keyword">=</span><span class="default">count</span><span class="keyword">(</span><span class="default">$root</span><span class="keyword">-&gt;</span><span class="default">children</span><span class="keyword">());<br />
<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">$n</span><span class="keyword">&gt;</span><span class="default">0</span><span class="keyword">){<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="comment">/**<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * start of the correction<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="keyword">if (!isset(</span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][</span><span class="string">'@attributes'</span><span class="keyword">])){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][</span><span class="string">'@attributes'</span><span class="keyword">]=array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach (</span><span class="default">$root</span><span class="keyword">-&gt;</span><span class="default">attributes</span><span class="keyword">() as </span><span class="default">$atr</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][</span><span class="string">'@attributes'</span><span class="keyword">][</span><span class="default">$atr</span><span class="keyword">]=(string)</span><span class="default">$value</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="comment">/**<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp; end of the correction<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="keyword">foreach (</span><span class="default">$root</span><span class="keyword">-&gt;</span><span class="default">children</span><span class="keyword">() as </span><span class="default">$child</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$name</span><span class="keyword">=</span><span class="default">$child</span><span class="keyword">-&gt;</span><span class="default">getName</span><span class="keyword">();&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">convert_xml2array</span><span class="keyword">(</span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][],</span><span class="default">$child</span><span class="keyword">,</span><span class="default">$name</span><span class="keyword">);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp;&nbsp; } else {&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">]= (array) </span><span class="default">$root</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!isset(</span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][</span><span class="string">'@attributes'</span><span class="keyword">])){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">[</span><span class="default">$rootname</span><span class="keyword">][</span><span class="string">'@attributes'</span><span class="keyword">]=array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; } <br />
}<br />
<br />
</span><span class="comment">/**<br />
&nbsp;* Example how to use the function convert_xml2array<br />
&nbsp;*/<br />
<br />
/**<br />
&nbsp;* Return&nbsp; Array from a xml string<br />
&nbsp;*<br />
&nbsp;* @param string $xml<br />
&nbsp;* @return array<br />
&nbsp;*/<br />
</span><span class="keyword">function </span><span class="default">get_array_fromXML</span><span class="keyword">(</span><span class="default">$xml</span><span class="keyword">){&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$result</span><span class="keyword">=array();&nbsp; &nbsp; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$doc</span><span class="keyword">=</span><span class="default">simplexml_load_string</span><span class="keyword">(</span><span class="default">$xml</span><span class="keyword">);&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; </span><span class="default">convert_xml2array</span><span class="keyword">(</span><span class="default">$result</span><span class="keyword">,</span><span class="default">$doc</span><span class="keyword">);&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">$result</span><span class="keyword">[</span><span class="string">'root'</span><span class="keyword">];&nbsp; &nbsp; <br />
}<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="74506"></a>
 <div class="note">
  <strong>adamaflynn at criticaldevelopment dot net</strong><br />
  <a href="#74506">14-Apr-2007 11:50</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here is an example of another XML parsing script that parses the document into an array/object structure instead of relying on startElement, endElement, etc handlers.<br />
<br />
You can find the documentation at:<br />
<a href="http://www.criticaldevelopment.net/xml/doc.php" target="_blank">http://www.criticaldevelopment.net/xml/doc.php</a><br />
<br />
And the code (both PHP4 and PHP5 versions):<br />
<a href="http://www.criticaldevelopment.net/xml/parser_php4.phps" target="_blank">http://www.criticaldevelopment.net/xml/parser_php4.phps</a><br />
<a href="http://www.criticaldevelopment.net/xml/parser_php5.phps" target="_blank">http://www.criticaldevelopment.net/xml/parser_php5.phps</a><br />
<br />
If you have any questions about it, just drop me an e-mail.</span>
</code></div>
  </div>
 </div>
 <a name="74456"></a>
 <div class="note">
  <strong>phpzmurf[at]yahoo.com</strong><br />
  <a href="#74456">12-Apr-2007 04:19</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
/*<br />
&nbsp;* Parse rss news, quotes etc.<br />
&nbsp;*<br />
&nbsp;* author : phpZmurf &lt;phpzmurf[at]yahoo.com&gt;<br />
&nbsp;* created: 12.04.2007<br />
&nbsp;* ver&nbsp; &nbsp; : 1.0<br />
&nbsp;*<br />
*/<br />
<br />
$data = implode("", file("<a href="http://feeds.feedburner.com/quotationspage/qotd/" target="_blank">http://feeds.feedburner.com/quotationspage/qotd/</a>"));<br />
$parser = xml_parser_create();<br />
xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);<br />
xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);<br />
xml_parse_into_struct($parser, $data, $values, $tags);<br />
xml_parser_free($parser);<br />
<br />
# data saved here<br />
$arrQuotes = array();<br />
# at the beginig - the tag is set colsed<br />
$tagOpen = false;<br />
<br />
foreach($values as $key =&gt; $item) {<br />
&nbsp;&nbsp;&nbsp; if(!$tagOpen and $item['tag'] == 'item' and $item['type'] == 'open') {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; # item tag opens<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $tagOpen = true;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; # empty temporary variables<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $temp_title = '';<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $temp_description = '';<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $temp_guid = '';<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $temp_link = '';<br />
&nbsp;&nbsp;&nbsp; } elseif($item['tag'] == 'item' and $item['type'] == 'close') {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; # item tag ends<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $tagOpen = false;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; # if all 4 tags contain data... add them to output array<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($temp_title != '' and $temp_description != '' and $temp_guid != '' and $temp_link != '') {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $arrQuotes[] = array(<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'title' =&gt; $temp_title,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'description' =&gt; $temp_description,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'guid' =&gt; $temp_guid,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'link' =&gt; $temp_link<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; );<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; } else {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; # save data into temporary variables<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; switch($item['tag']) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case 'title':<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $temp_title = $item['value'];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case 'description':<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # this here quz there was a fuggin &lt;p&gt; at the end of the desription<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; #$temp_description = $item['value'];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $temp_description = substr($item['value'], 0, strpos($item['value'], '&lt;'));<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case 'guid':<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $temp_guid = $item['value'];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case 'link':<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $temp_link = $item['value'];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; default: break;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
foreach($arrQuotes as $key =&gt; $item) {<br />
&nbsp;&nbsp;&nbsp; print_r($item);<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="73906"></a>
 <div class="note">
  <strong>Sheer Pullen</strong><br />
  <a href="#73906">14-Mar-2007 07:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I took the code posted by forqoun and modified it to be somewhat more readable (by me), somewhat more friendly to the idea of parsing multiple files with the same object, and to be compatable with a HTTP POST of XML data. Anyone who's interested in my version of associated array output can check it out at <a href="http://www.sheer.us/code/php/xml-parse-to-associative-array.phpsrc" target="_blank">http://www.sheer.us/code/php/xml-parse-to-associative-array.phpsrc</a><br />
<br />
Be nice to me, this is my first published php code</span>
</code></div>
  </div>
 </div>
 <a name="72051"></a>
 <div class="note">
  <strong>geoffers [at] gmail [dot] com</strong><br />
  <a href="#72051">30-Dec-2006 03:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Time to add my attempt at a very simple script that parses XML into a structure:<br />
<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">class </span><span class="default">Simple_Parser <br />
</span><span class="keyword">{<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$parser</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$error_code</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$error_string</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$current_line</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$current_column</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$data </span><span class="keyword">= array();<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$datas </span><span class="keyword">= array();<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">(</span><span class="string">'UTF-8'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">XML_OPTION_SKIP_WHITE</span><span class="keyword">, </span><span class="default">1</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'tag_open'</span><span class="keyword">, </span><span class="string">'tag_close'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'cdata'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_code </span><span class="keyword">= </span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_string </span><span class="keyword">= </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">error_code</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">current_line </span><span class="keyword">= </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">current_column </span><span class="keyword">= </span><span class="default">xml_get_current_column_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_open</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">, </span><span class="default">$attribs</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">][</span><span class="default">$tag</span><span class="keyword">][] = array(</span><span class="string">'data' </span><span class="keyword">=&gt; </span><span class="string">''</span><span class="keyword">, </span><span class="string">'attribs' </span><span class="keyword">=&gt; </span><span class="default">$attribs</span><span class="keyword">, </span><span class="string">'child' </span><span class="keyword">=&gt; array());<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">datas</span><span class="keyword">[] =&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">][</span><span class="default">$tag</span><span class="keyword">][</span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">][</span><span class="default">$tag</span><span class="keyword">])-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">cdata</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$cdata</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">] .= </span><span class="default">$cdata</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">tag_close</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$tag</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">datas</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">datas</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">datas</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
</span><span class="default">$xml_parser </span><span class="keyword">= new </span><span class="default">Simple_Parser</span><span class="keyword">;<br />
</span><span class="default">$xml_parser</span><span class="keyword">-&gt;</span><span class="default">parse</span><span class="keyword">(</span><span class="string">'&lt;foo&gt;&lt;bar&gt;test&lt;/bar&gt;&lt;/foo&gt;'</span><span class="keyword">);<br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="71941"></a>
 <div class="note">
  <strong>Didier: dlvb ** free * fr</strong><br />
  <a href="#71941">24-Dec-2006 09:53</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Hi !<br />
<br />
After parsing the XML and modifying it, I just add a method to rebuild the XML form the internal structure (xmlp-&gt;document). <br />
The method xmlp-&gt;toXML writes into xmlp-&gt;XML attributes. Then, you just have to output it.<br />
I hope it helps.<br />
<br />
class XMLParser {<br />
<br />
var $parser;<br />
var $filePath;<br />
var $document;<br />
var $currTag;<br />
var $tagStack;<br />
var $XML;<br />
var $_tag_to_close = false;<br />
var $TAG_ATTRIBUT = 'attr';<br />
var $TAG_DATA = 'data';<br />
<br />
function XMLParser($path) {<br />
&nbsp;&nbsp;&nbsp; $this-&gt;parser = xml_parser_create();<br />
&nbsp;&nbsp;&nbsp; $this-&gt;filePath = $path;<br />
&nbsp;&nbsp;&nbsp; $this-&gt;document = array();<br />
&nbsp;&nbsp;&nbsp; $this-&gt;currTag =&amp; $this-&gt;document;<br />
&nbsp;&nbsp;&nbsp; $this-&gt;tagStack = array();<br />
&nbsp;&nbsp;&nbsp; $this-&gt;XML = "";<br />
}<br />
<br />
function parse() {<br />
&nbsp;&nbsp;&nbsp; xml_set_object($this-&gt;parser, $this);<br />
&nbsp;&nbsp;&nbsp; xml_set_character_data_handler($this-&gt;parser, 'dataHandler');<br />
&nbsp;&nbsp;&nbsp; xml_set_element_handler($this-&gt;parser, 'startHandler', 'endHandler');<br />
<br />
&nbsp;&nbsp; if(!($fp = fopen($this-&gt;filePath, "r"))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; die("Cannot open XML data file: $this-&gt;filePath");<br />
&nbsp;&nbsp; &nbsp; &nbsp; return false;<br />
&nbsp;&nbsp; &nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; while($data = fread($fp, 4096)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!xml_parse($this-&gt;parser, $data, feof($fp))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; die(sprintf("XML error: %s at line %d",<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; xml_error_string(xml_get_error_code($this-&gt;parser)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xml_get_current_line_number($this-&gt;parser)));<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; fclose($fp);<br />
&nbsp;&nbsp;&nbsp; xml_parser_free($this-&gt;parser);<br />
<br />
&nbsp;&nbsp;&nbsp; return true;<br />
}<br />
<br />
function startHandler($parser, $name, $attribs) {<br />
&nbsp;&nbsp; &nbsp; if(!isset($this-&gt;currTag[$name]))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;currTag[$name] = array();<br />
<br />
&nbsp;&nbsp; &nbsp; $newTag = array();<br />
&nbsp;&nbsp; &nbsp; if(!empty($attribs))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $newTag[$this-&gt;TAG_ATTRIBUT] = $attribs;<br />
&nbsp;&nbsp; &nbsp; array_push($this-&gt;currTag[$name], $newTag);<br />
<br />
&nbsp;&nbsp; &nbsp; $t =&amp; $this-&gt;currTag[$name];<br />
&nbsp;&nbsp; &nbsp; $this-&gt;currTag =&amp; $t[count($t)-1];<br />
&nbsp;&nbsp; &nbsp; array_push($this-&gt;tagStack, $name);<br />
}<br />
<br />
function dataHandler($parser, $data) {<br />
&nbsp;&nbsp;&nbsp; $data = trim($data);<br />
<br />
&nbsp;&nbsp;&nbsp; if(!empty($data)) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(isset($this-&gt;currTag[$this-&gt;TAG_DATA]))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;currTag[$this-&gt;TAG_DATA] .= $data;<br />
&nbsp;&nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;currTag[$this-&gt;TAG_DATA] = $data;<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
function endHandler($parser, $name) {<br />
&nbsp;&nbsp; &nbsp; $this-&gt;currTag =&amp; $this-&gt;document;<br />
&nbsp;&nbsp; &nbsp; array_pop($this-&gt;tagStack);<br />
<br />
&nbsp;&nbsp; &nbsp; for($i = 0; $i &lt; count($this-&gt;tagStack); $i++) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $t =&amp; $this-&gt;currTag[$this-&gt;tagStack[$i]];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;currTag =&amp; $t[count($t)-1];<br />
&nbsp;&nbsp; &nbsp; }<br />
}<br />
<br />
function clearOutput () {<br />
&nbsp;&nbsp;&nbsp; $this-&gt;XML = "";<br />
}<br />
<br />
function openTag ($tag) {<br />
&nbsp;&nbsp;&nbsp; $this-&gt;XML.="&lt;".strtolower ($tag);<br />
&nbsp;&nbsp;&nbsp; $this-&gt;_tag_to_close = true;<br />
}<br />
<br />
function closeTag () {<br />
&nbsp;&nbsp;&nbsp; if ($this-&gt;_tag_to_close) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;XML.="&gt;";<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;_tag_to_close = false;<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
function closingTag ($tag) {<br />
&nbsp;&nbsp;&nbsp; $this-&gt;XML.="&lt;/".strtolower ($tag)."&gt;";<br />
}<br />
<br />
function output_attributes ($contenu_fils) {<br />
&nbsp;&nbsp;&nbsp; foreach ($contenu_fils[$this-&gt;TAG_ATTRIBUT] as $nomAttribut =&gt; $valeur) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;XML.= " ".strtolower($nomAttribut)."=\"".$valeur."\"";<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
function addData ($texte) {<br />
// to be completed<br />
&nbsp;&nbsp;&nbsp; $ca&nbsp; = array ("é", "è", "ê", "à");<br />
&nbsp;&nbsp;&nbsp; $par = array ("&amp;eacute;", "&amp;egrave;", "&amp;ecirc;", "agrave;");<br />
&nbsp;&nbsp;&nbsp; return htmlspecialchars(str_replace ($ca, $par, $texte), ENT_NOQUOTES);<br />
}<br />
<br />
function toXML ($tags="") {<br />
&nbsp;&nbsp;&nbsp; if ($tags=="") {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $tags = $this-&gt;document;<br />
&nbsp;&nbsp; &nbsp;&nbsp; $this-&gt;clearOutput ();<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; foreach ($tags as $tag =&gt; $contenu) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;process ($tag, $contenu);<br />
&nbsp;&nbsp;&nbsp; }<br />
} <br />
<br />
function process ($tag, $contenu) {<br />
&nbsp;&nbsp; &nbsp; // Pour tous les TAGs<br />
&nbsp;&nbsp;&nbsp; foreach ($contenu as $indice =&gt; $contenu_fils) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;openTag ($tag);<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; // Pour tous les fils (non attribut et non data)<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; foreach ($contenu_fils as $tagFils =&gt; $fils) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch ($tagFils) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case $this-&gt;TAG_ATTRIBUT:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;output_attributes ($contenu_fils);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;closeTag ();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case $this-&gt;TAG_DATA:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;closeTag ();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;XML.= $this-&gt;addData ($contenu_fils [$this-&gt;TAG_DATA]);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default: <br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;closeTag ();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;process ($tagFils, $fils);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; } <br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $this-&gt;closingTag ($tag);<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="71866"></a>
 <div class="note">
  <strong>dmeekins att  gmail doot com</strong><br />
  <a href="#71866">20-Dec-2006 07:02</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I reworked some of the code I found posted previously here, mainly so I could access the structure of the parsed xml file by the tags' names. So if I was parsing html that's also valid xml, I could access the page title by $xmlp-&gt;document['HTML'][0]['HEAD'][0]['TITLE'][0]['data']. The index after the tag name corresponds to the occurrence of that tag. If there were two &lt;head&gt;&lt;/head&gt; in the same depth, then the second one could get accessed by ['HEAD'][1].<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="keyword">class </span><span class="default">XMLParser<br />
</span><span class="keyword">{<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; var </span><span class="default">$parser</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$filePath</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$document</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$currTag</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; var </span><span class="default">$tagStack</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">XMLParser</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">filePath </span><span class="keyword">= </span><span class="default">$path</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">document </span><span class="keyword">= array();<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">document</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">tagStack </span><span class="keyword">= array();<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">()<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'dataHandler'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="string">'startHandler'</span><span class="keyword">, </span><span class="string">'endHandler'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; if(!(</span><span class="default">$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">filePath</span><span class="keyword">, </span><span class="string">"r"</span><span class="keyword">)))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; die(</span><span class="string">"Cannot open XML data file: $this-&gt;filePath"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">false</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; while(</span><span class="default">$data </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">4096</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">, </span><span class="default">feof</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">)))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; die(</span><span class="default">sprintf</span><span class="keyword">(</span><span class="string">"XML error: %s at line %d"</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">)));<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">fclose</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">parser</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return </span><span class="default">true</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">startHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attribs</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!isset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="default">$name</span><span class="keyword">]))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="default">$name</span><span class="keyword">] = array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$newTag </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!empty(</span><span class="default">$attribs</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$newTag</span><span class="keyword">[</span><span class="string">'attr'</span><span class="keyword">] = </span><span class="default">$attribs</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="default">$name</span><span class="keyword">], </span><span class="default">$newTag</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$t </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="default">$name</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag </span><span class="keyword">=&amp; </span><span class="default">$t</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$t</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">tagStack</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">dataHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$data </span><span class="keyword">= </span><span class="default">trim</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!empty(</span><span class="default">$data</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(isset(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">]))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">] .= </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; else<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="string">'data'</span><span class="keyword">] = </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; function </span><span class="default">endHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">)<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">document</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">tagStack</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; for(</span><span class="default">$i </span><span class="keyword">= </span><span class="default">0</span><span class="keyword">; </span><span class="default">$i </span><span class="keyword">&lt; </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">tagStack</span><span class="keyword">); </span><span class="default">$i</span><span class="keyword">++)<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$t </span><span class="keyword">=&amp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag</span><span class="keyword">[</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">tagStack</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">currTag </span><span class="keyword">=&amp; </span><span class="default">$t</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$t</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="71837"></a>
 <div class="note">
  <strong>vavricek at volny dot cz</strong><br />
  <a href="#71837">18-Dec-2006 11:53</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
RE: forquan (29-Jan-2006 12:45)<br />
<br />
Thanks, for your code (it was what I need), but ... it didn't works with my XML file. I think that you tested it on simple XML. Never mind.<br />
I change few lines (problem was in endHandler function), and now it WORKS :-)<br />
<br />
<span class="default">&lt;?php<br />
&nbsp;$p </span><span class="keyword">=&amp; new </span><span class="default">xmlParser</span><span class="keyword">();<br />
&nbsp;</span><span class="default">$p</span><span class="keyword">-&gt;</span><span class="default">parse</span><span class="keyword">(</span><span class="string">"/* XML file*/"</span><span class="keyword">);<br />
&nbsp;echo </span><span class="string">"&lt;pre&gt;"</span><span class="keyword">;<br />
&nbsp;</span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">);<br />
&nbsp;echo </span><span class="string">"&lt;/pre&gt;"</span><span class="keyword">;<br />
<br />
class </span><span class="default">xmlParser</span><span class="keyword">{<br />
&nbsp;&nbsp; var </span><span class="default">$xml_obj </span><span class="keyword">= </span><span class="default">null</span><span class="keyword">;<br />
&nbsp;&nbsp; var </span><span class="default">$output </span><span class="keyword">= array();<br />
&nbsp;&nbsp; var </span><span class="default">$attrs</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; function </span><span class="default">xmlParser</span><span class="keyword">(){<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">,</span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="string">'dataHandler'</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="string">"startHandler"</span><span class="keyword">, </span><span class="string">"endHandler"</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; if (!(</span><span class="default">$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">, </span><span class="string">"r"</span><span class="keyword">))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die(</span><span class="string">"Cannot open XML data file: $path"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return </span><span class="default">false</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; while (</span><span class="default">$data </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">4096</span><span class="keyword">)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">, </span><span class="default">feof</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die(</span><span class="default">sprintf</span><span class="keyword">(</span><span class="string">"XML error: %s at line %d"</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">)));<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; return </span><span class="default">true</span><span class="keyword">;<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">startHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attribs</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_content </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_content</span><span class="keyword">[</span><span class="string">'name'</span><span class="keyword">] = </span><span class="default">$name</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!empty(</span><span class="default">$attribs</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_content</span><span class="keyword">[</span><span class="string">'attrs'</span><span class="keyword">] = </span><span class="default">$attribs</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">, </span><span class="default">$_content</span><span class="keyword">);<br />
}<br />
<br />
&nbsp;&nbsp; function </span><span class="default">dataHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!empty(</span><span class="default">$data</span><span class="keyword">) &amp;&amp; </span><span class="default">$data</span><span class="keyword">!=</span><span class="string">"\n"</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_output_idx </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) - </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'content'</span><span class="keyword">] .= </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">endHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) &gt; </span><span class="default">1</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_data </span><span class="keyword">= </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$_output_idx </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) - </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$add </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(!</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'child'</span><span class="keyword">])<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'child'</span><span class="keyword">] = array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'child'</span><span class="keyword">], </span><span class="default">$_data</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }&nbsp;&nbsp; <br />
&nbsp;&nbsp; }<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="71792"></a>
 <div class="note">
  <strong>sasha at goldnet dot ca</strong><br />
  <a href="#71792">15-Dec-2006 03:55</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Re: hutch at midwales dot com<br />
<br />
That function looks like major overkill. <br />
<br />
To remove all white space between tags you could simply do:<br />
preg_replace ("&gt;/\s+&lt;/" , "&gt;&lt;" , $string);</span>
</code></div>
  </div>
 </div>
 <a name="70049"></a>
 <div class="note">
  <strong>hutch at midwales dot com</strong><br />
  <a href="#70049">01-Oct-2006 09:26</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
First off, I'd like thank all and sundry for providing this excellent resource, it has been very helpful in getting my head around xml parsing.<br />
<br />
I was recently handed the task of collecting a variety of xml streams, from many different sources and of widely varying quality. <br />
<br />
If have found that the following function helped parsing the input by cleaning it up. It removes all leading and trailing whitespace and removes carriage returns and linefeeds.<br />
<br />
Using this function before using xml_parser_create() has helped reduce a number of otherwise unexplainable anomalies, such as arbitrary cutoff of data or the data being divided into two, requiring concatenation. Data longer than 1024 characters still has to be concatenated, but I can live with that.<br />
<br />
<span class="default">&lt;?php<br />
</span><span class="comment">// remove whitespace and linefeeds and returns the name of a temporary file<br />
// takes the name of an existing file as a parameter<br />
</span><span class="keyword">function </span><span class="default">cleanxmlfile</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">, </span><span class="default">$tmpdir</span><span class="keyword">=</span><span class="string">"/tmp"</span><span class="keyword">, </span><span class="default">$prefix</span><span class="keyword">=</span><span class="string">"xxx_"</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmp </span><span class="keyword">= </span><span class="default">file_get_contents </span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmp </span><span class="keyword">= </span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/^\s+/m"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$tmp</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmp </span><span class="keyword">= </span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/\s+$/m"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$tmp</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmp </span><span class="keyword">= </span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/\r/"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$tmp</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmp </span><span class="keyword">= </span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/\n/"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$tmp</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$tmpfname </span><span class="keyword">= </span><span class="default">tempnam</span><span class="keyword">(</span><span class="default">$tmpdir</span><span class="keyword">, </span><span class="default">$prefix</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$handle </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$tmpfname</span><span class="keyword">, </span><span class="string">"w"</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">fwrite</span><span class="keyword">(</span><span class="default">$handle</span><span class="keyword">, </span><span class="string">"$tmp"</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">fclose</span><span class="keyword">(</span><span class="default">$handle</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; return(</span><span class="default">$tmpfname</span><span class="keyword">);<br />
}<br />
</span><span class="default">?&gt;<br />
</span><br />
HTH</span>
</code></div>
  </div>
 </div>
 <a name="61231"></a>
 <div class="note">
  <strong>forquan</strong><br />
  <a href="#61231">28-Jan-2006 03:45</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Here's code that will create an associative array from an xml file.&nbsp; Keys are the tag data and subarrays are formed from attributes and child tags<br />
<br />
<span class="default">&lt;?php<br />
$p </span><span class="keyword">=&amp; new </span><span class="default">xmlParser</span><span class="keyword">();<br />
</span><span class="default">$p</span><span class="keyword">-&gt;</span><span class="default">parse</span><span class="keyword">(</span><span class="string">'/*xml file*/'</span><span class="keyword">);<br />
</span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">);<br />
</span><span class="default">?&gt;<br />
</span><br />
<span class="default">&lt;?php<br />
</span><span class="keyword">class </span><span class="default">xmlParser</span><span class="keyword">{<br />
&nbsp;&nbsp; var </span><span class="default">$xml_obj </span><span class="keyword">= </span><span class="default">null</span><span class="keyword">;<br />
&nbsp;&nbsp; var </span><span class="default">$output </span><span class="keyword">= array();<br />
&nbsp;&nbsp; var </span><span class="default">$attrs</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; function </span><span class="default">xmlParser</span><span class="keyword">(){<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_object</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">,</span><span class="default">$this</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="string">'dataHandler'</span><span class="keyword">); <br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="string">"startHandler"</span><span class="keyword">, </span><span class="string">"endHandler"</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; if (!(</span><span class="default">$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">, </span><span class="string">"r"</span><span class="keyword">))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die(</span><span class="string">"Cannot open XML data file: $path"</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return </span><span class="default">false</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; while (</span><span class="default">$data </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">4096</span><span class="keyword">)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">, </span><span class="default">feof</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die(</span><span class="default">sprintf</span><span class="keyword">(</span><span class="string">"XML error: %s at line %d"</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">)));<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">xml_obj</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; }<br />
<br />
&nbsp;&nbsp; &nbsp; &nbsp; return </span><span class="default">true</span><span class="keyword">;<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">startHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attribs</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">$_content </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; if(!empty(</span><span class="default">$attribs</span><span class="keyword">))<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$_content</span><span class="keyword">[</span><span class="string">'attrs'</span><span class="keyword">] = </span><span class="default">$attribs</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">, </span><span class="default">$_content</span><span class="keyword">);<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">dataHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; if(!empty(</span><span class="default">$data</span><span class="keyword">) &amp;&amp; </span><span class="default">$data</span><span class="keyword">!=</span><span class="string">"\n"</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$_output_idx </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) - </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'content'</span><span class="keyword">] .= </span><span class="default">$data</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; }<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; function </span><span class="default">endHandler</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; if(</span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) &gt; </span><span class="default">1</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$_data </span><span class="keyword">= </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$_output_idx </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">) - </span><span class="default">1</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$add </span><span class="keyword">= array();<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (</span><span class="default">$_data</span><span class="keyword">[</span><span class="string">'attrs'</span><span class="keyword">])<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$add</span><span class="keyword">[</span><span class="string">'attrs'</span><span class="keyword">] = </span><span class="default">$_data</span><span class="keyword">[</span><span class="string">'attrs'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (</span><span class="default">$_data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">])<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">$add</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">] = </span><span class="default">$_data</span><span class="keyword">[</span><span class="string">'child'</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">output</span><span class="keyword">[</span><span class="default">$_output_idx</span><span class="keyword">][</span><span class="string">'child'</span><span class="keyword">][</span><span class="default">$_data</span><span class="keyword">[</span><span class="string">'content'</span><span class="keyword">]] = </span><span class="default">$add</span><span class="keyword">;<br />
&nbsp;&nbsp; &nbsp; &nbsp; }&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; }<br />
}<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="58845"></a>
 <div class="note">
  <strong>Greg S</strong><br />
  <a href="#58845">17-Nov-2005 08:56</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
If you need utf8_encode support and configure PHP with --disable-all you will have some trouble. Unfortunately the configure options aren't completely documented. If you need utf8 functions and have everything disabled just recompile PHP with --enable-xml and you should be good to go.</span>
</code></div>
  </div>
 </div>
 <a name="51637"></a>
 <div class="note">
  <strong>simonguada at yahoo dot fr</strong><br />
  <a href="#51637">06-Apr-2005 02:31</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
to import xml into mysql<br />
<br />
$file = "article_2_3032005467.xml";<br />
$feed = array();<br />
$key = "";<br />
$info = "";<br />
<br />
function startElement($xml_parser,&nbsp; $attrs ) {<br />
&nbsp; global $feed;<br />
&nbsp;&nbsp; }<br />
<br />
function endElement($xml_parser, $name) { <br />
&nbsp; global $feed,&nbsp; $info; <br />
&nbsp;&nbsp; $key = $name;<br />
&nbsp; $feed[$key] = $info;<br />
&nbsp; $info = ""; }<br />
<br />
function charData($xml_parser, $data ) {<br />
&nbsp; global $info;<br />
&nbsp; $info .= $data; }<br />
<br />
$xml_parser = xml_parser_create();<br />
xml_set_element_handler($xml_parser, "startElement", "endElement");<br />
xml_set_character_data_handler($xml_parser, "charData" );<br />
$fp = fopen($file, "r");<br />
while ($data = fread($fp, 8192))<br />
!xml_parse($xml_parser, $data, feof($fp));<br />
xml_parser_free($xml_parser);<br />
<br />
$sql= "INSERT INTO `article` ( `";<br />
$j=0;<br />
$i=count($feed);<br />
foreach( $feed as $assoc_index =&gt; $value )<br />
&nbsp; {<br />
&nbsp; $j++;<br />
&nbsp; $sql.= strtolower($assoc_index);<br />
&nbsp; if($i&gt;$j) $sql.= "` , `";<br />
&nbsp; if($i&lt;=$j) {$sql.= "` ) VALUES ('";}<br />
&nbsp; }<br />
&nbsp;$h=0;<br />
foreach( $feed as $assoc_index =&gt; $value )<br />
&nbsp; {<br />
&nbsp; $h++;<br />
&nbsp; $sql.= utf8_decode(trim(addslashes($value)));<br />
&nbsp; if($i-1&gt;$h) $sql.= "', '";<br />
&nbsp; if($i&lt;=$h) $sql.= "','')";<br />
&nbsp; }<br />
&nbsp; $sql=trim($sql);<br />
&nbsp; echo $sql;</span>
</code></div>
  </div>
 </div>
 <a name="45802"></a>
 <div class="note">
  <strong>compu_global_hyper_mega_net_2 at yahoo dot com</strong><br />
  <a href="#45802">19-Sep-2004 01:35</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The documentation regarding white space was never complete I think.<br />
<br />
The XML_OPTION_SKIP_WHITE doesn't appear to do anything.&nbsp; I want to preserve the newlines in a cdata section.&nbsp; Setting XML_OPTION_SKIP_WHITE to 0 or false doesn't appear to help.&nbsp; My character_data_handler is getting called once for each line.&nbsp; This obviously should be reflected in the documentation as well.&nbsp; When/how often does the handler get called exactly?&nbsp; Having to build separate test cases is very time consuming.<br />
<br />
Inserting newlines myself in my cdata handler is no good either.&nbsp; For non actual CDATA sections that cause my handler to get called, long lines are split up in multiple calls.&nbsp; My handler would not be able to tell the difference whether or not the subsequent calls would be due to the fact that the data is coming from the next line or the fact that some internal buffer is long enough for it to 'flush' out and call the handler.<br />
This behaviour also needs to be properly documented.</span>
</code></div>
  </div>
 </div>
 <a name="40918"></a>
 <div class="note">
  <strong>odders</strong><br />
  <a href="#40918">18-Mar-2004 10:36</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I wrote a simple xml parser mainly to deal with rss version 2. I found lots of examples on the net, but they were all masive and bloated and hard to manipulate.<br />
<br />
Output is sent to an array, which holds arrays containg data for each item.<br />
<br />
Obviously, you will have to make modifications to the code to suit your needs, but there isnt a lot of code there, so that shouldnt be a problem.<br />
<br />
<span class="default">&lt;?php<br />
<br />
&nbsp;&nbsp; $currentElements </span><span class="keyword">= array();<br />
&nbsp;&nbsp; </span><span class="default">$newsArray </span><span class="keyword">= array();<br />
<br />
&nbsp;&nbsp; </span><span class="default">readXml</span><span class="keyword">(</span><span class="string">"./news.xml"</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; echo(</span><span class="string">"&lt;pre&gt;"</span><span class="keyword">);<br />
&nbsp;&nbsp; </span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$newsArray</span><span class="keyword">);<br />
&nbsp;&nbsp; echo(</span><span class="string">"&lt;/pre&gt;"</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; </span><span class="comment">// Reads XML file into formatted html<br />
&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">readXML</span><span class="keyword">(</span><span class="default">$xmlFile</span><span class="keyword">)<br />
&nbsp;&nbsp; {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$xmlParser </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$xmlParser</span><span class="keyword">, </span><span class="default">XML_OPTION_CASE_FOLDING</span><span class="keyword">, </span><span class="default">false</span><span class="keyword">); <br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$xmlParser</span><span class="keyword">, </span><span class="default">startElement</span><span class="keyword">, </span><span class="default">endElement</span><span class="keyword">); <br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$xmlParser</span><span class="keyword">, </span><span class="default">characterData</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$xmlFile</span><span class="keyword">, </span><span class="string">"r"</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; while(</span><span class="default">$data </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">filesize</span><span class="keyword">(</span><span class="default">$xmlFile</span><span class="keyword">))){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$xmlParser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">, </span><span class="default">feof</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">));}<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$xmlParser</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp; </span><span class="comment">// Sets the current XML element, and pushes itself onto the element hierarchy<br />
&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">startElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attrs</span><span class="keyword">)<br />
&nbsp;&nbsp; {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; global </span><span class="default">$currentElements</span><span class="keyword">, </span><span class="default">$itemCount</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$currentElements</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">);<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(</span><span class="default">$name </span><span class="keyword">== </span><span class="string">"item"</span><span class="keyword">){</span><span class="default">$itemCount </span><span class="keyword">+= </span><span class="default">1</span><span class="keyword">;}<br />
<br />
&nbsp;&nbsp; } <br />
<br />
&nbsp;&nbsp; </span><span class="comment">// Prints XML data; finds highlights and links<br />
&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">characterData</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">)<br />
&nbsp;&nbsp; {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; global </span><span class="default">$currentElements</span><span class="keyword">, </span><span class="default">$newsArray</span><span class="keyword">, </span><span class="default">$itemCount</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$currentCount </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$currentElements</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$parentElement </span><span class="keyword">= </span><span class="default">$currentElements</span><span class="keyword">[</span><span class="default">$currentCount</span><span class="keyword">-</span><span class="default">2</span><span class="keyword">];<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$thisElement </span><span class="keyword">= </span><span class="default">$currentElements</span><span class="keyword">[</span><span class="default">$currentCount</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">];<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(</span><span class="default">$parentElement </span><span class="keyword">== </span><span class="string">"item"</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">$newsArray</span><span class="keyword">[</span><span class="default">$itemCount</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">][</span><span class="default">$thisElement</span><span class="keyword">] = </span><span class="default">$data</span><span class="keyword">;}<br />
&nbsp;&nbsp; &nbsp;&nbsp; else{<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; switch(</span><span class="default">$name</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="string">"title"</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="string">"link"</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="string">"description"</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="string">"language"</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case </span><span class="string">"item"</span><span class="keyword">:<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;}}<br />
<br />
&nbsp;&nbsp; } <br />
<br />
&nbsp;&nbsp; </span><span class="comment">// If the XML element has ended, it is poped off the hierarchy<br />
&nbsp;&nbsp; </span><span class="keyword">function </span><span class="default">endElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">)<br />
&nbsp;&nbsp; {<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; global </span><span class="default">$currentElements</span><span class="keyword">;<br />
<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$currentCount </span><span class="keyword">= </span><span class="default">count</span><span class="keyword">(</span><span class="default">$currentElements</span><span class="keyword">);<br />
&nbsp;&nbsp; &nbsp;&nbsp; if(</span><span class="default">$currentElements</span><span class="keyword">[</span><span class="default">$currentCount</span><span class="keyword">-</span><span class="default">1</span><span class="keyword">] == </span><span class="default">$name</span><span class="keyword">){<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$currentElements</span><span class="keyword">);}<br />
<br />
&nbsp;&nbsp; } <br />
<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="39584"></a>
 <div class="note">
  <strong>talraith at withouthonor dot com</strong><br />
  <a href="#39584">03-Feb-2004 02:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I have created a class set that both parses XML into an object structure and from that structure creates XML code.&nbsp; It is mostly finished but I thought I would post here as it may help someone out or if someone wants to use it as a base for their own parser.&nbsp; The method for creating the object is original compared to the posts before this one.<br />
<br />
The object tree is created by created seperate tag objects for each tag inside the main document object and associating them together by way of object references.&nbsp; An index table is created so that each tag is assigned an ID number (in numerical order from 0) and can be accessed directly using that ID number.&nbsp; Each tag has object references to its children.&nbsp; There are no uses of eval() in this code.<br />
<br />
The code is too long to post here, so I have made a HTML page that has it:&nbsp; <a href="http://www.withouthonor.com/obj_xml.html" target="_blank">http://www.withouthonor.com/obj_xml.html</a><br />
<br />
Sample code would look something like this:<br />
<br />
&lt;?<br />
<br />
$xml = new xml_doc($my_xml_code);<br />
$xml-&gt;parse();<br />
<br />
$root_tag =&amp; $xml-&gt;xml_index[0];<br />
$children =&amp; $root_tag-&gt;children;<br />
<br />
// and so forth<br />
<br />
// To create XML code using the object, would be similar to this:<br />
<br />
$my_xml = new xml_doc();<br />
<br />
$root_tag = $my_xml-&gt;CreateTag('ROOTTAG');<br />
$my_xml-&gt;CreateTag('CHILDTAG',array(),'',$root_tag);<br />
<br />
// The following is used for the CreateTag() method<br />
// string Name (The name of the child tag)<br />
// array Attributes (associative array of attributes for tag)<br />
// string Content (textual data for the child tag)<br />
// int ParentID (Index number for parent tag)<br />
<br />
// To generate the XML, use the following method<br />
<br />
$out_xml = $my_xml-&gt;generate();<br />
<br />
?&gt;</span>
</code></div>
  </div>
 </div>
 <a name="38356"></a>
 <div class="note">
  <strong>bradparks at bradparks dot com</strong><br />
  <a href="#38356">17-Dec-2003 02:38</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Hey;<br />
<br />
If you need to parse XML on an older version of PHP (e.g. 4.0) or if you can't get the expat extension enabled on your server, you might want to check out the Saxy and DOMIT! xml parsers from Engage Interactive. They're opensource and pure php, so no extensions or changes to your server are required. I've been using them for over a month on some projects with no problems whatsoever!<br />
<br />
Check em out at:<br />
<br />
DOMIT!, a DOM based xml parser, uses Saxy (included)<br />
<a href="http://www.engageinteractive.com/redir.php?resource=1&amp;target=domit" target="_blank">http://www.engageinteractive.com/redir.php?resource=1&amp;target=domit</a><br />
<br />
or<br />
<br />
Saxy, a sax based xml parser<br />
<a href="http://www.engageinteractive.com/redir.php?resource=2&amp;target=saxy" target="_blank">http://www.engageinteractive.com/redir.php?resource=2&amp;target=saxy</a><br />
<br />
Brad</span>
</code></div>
  </div>
 </div>
 <a name="37265"></a>
 <div class="note">
  <strong>chris at hitcatcher dot com</strong><br />
  <a href="#37265">07-Nov-2003 02:48</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
In regards to jon at gettys dot org's XML object, The data should be TRIM()ed to remove any whitespace that could appear in CDATA entered as :<br />
<br />
&lt;xml_tag&gt;<br />
&nbsp;&nbsp;&nbsp; cdata here. cdata here. cdata here. cdata here.<br />
&lt;/xml_tag&gt;<br />
<br />
So, after applying fred at barron dot com's suggested change to the characterData function, the function should appear as:<br />
<br />
function characterData($parser, $data)<br />
{<br />
&nbsp;&nbsp;&nbsp; global $obj;<br />
&nbsp;&nbsp;&nbsp; $data = addslashes($data);<br />
&nbsp;&nbsp;&nbsp; eval($obj-&gt;tree."-&gt;data.='".trim($data)."';");<br />
}<br />
<br />
SIDE NOTE: I'm fairly new to XML so perhaps it is considered bad form to enter CDATA as I did in my example. Is this true or is the extra whitespace for the sake of readablity acceptable?</span>
</code></div>
  </div>
 </div>
 <a name="33634"></a>
 <div class="note">
  <strong>ml at csite dot com</strong><br />
  <a href="#33634">02-Jul-2003 08:29</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
A fix for the fread breaking thing:<br />
<br />
while ($data = fread($fp, 4096)) {<br />
<br />
&nbsp;&nbsp;&nbsp; $data = $cache . $data;<br />
<br />
&nbsp;&nbsp;&nbsp; if (!feof($fp)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (preg_match_all("(&lt;/?[a-z0-9A-Z]+&gt;)", $data, $regs)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $lastTagname = $regs[0][count($regs[0])-1];<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $split = false;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for ($i=strlen($data)-strlen($lastTagname); $i&gt;=strlen($lastTagname); $i--) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if ($lastTagname == substr($data, $i, strlen($lastTagname))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $cache = substr($data, $i, strlen($data));<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $data = substr($data, 0, $i);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $split = true;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (!$split) {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $cache = $data;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; if (!xml_parse($xml_parser, $data, feof($fp))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; die(sprintf("XML error: %s at line %d", xml_error_string(xml_get_error_code($xml_parser)), xml_get_current_line_number($xml_parser)));<br />
&nbsp;&nbsp;&nbsp; }<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="32219"></a>
 <div class="note">
  <strong>panania at 3ringwebs dot com</strong><br />
  <a href="#32219">20-May-2003 03:12</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
The above example doesn't work when you're parsing a string being returned from a curl operation (why I don't know!) I kept getting undefined offsets at the highest element number in both the start and end element functions. It wasn't the string itself I know, because I substringed it to death with the same results. But I fixed the problem by adding these lines of code...<br />
<br />
function defaultHandler($parser, $name) {<br />
&nbsp;&nbsp;&nbsp; global $depth;<br />
@&nbsp; &nbsp; $depth[$parser]--;<br />
}<br />
<br />
xml_set_default_handler($xml_parser, "defaultHandler");<br />
<br />
Hope this helps 8-}</span>
</code></div>
  </div>
 </div>
 <a name="31462"></a>
 <div class="note">
  <strong>fred at barron dot com</strong><br />
  <a href="#31462">22-Apr-2003 05:28</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
regarding jon at gettys dot org's nice XML to Object code, I've made some useful changes (IMHO) to the characterData function... my minor modifications allow multiple lines of data and it escapes quotes so errors don't occur in the eval...<br />
<br />
function characterData($parser, $data)<br />
{<br />
&nbsp;&nbsp;&nbsp; global $obj;<br />
&nbsp;&nbsp;&nbsp; $data = addslashes($data);<br />
&nbsp;&nbsp;&nbsp; eval($obj-&gt;tree."-&gt;data.='".$data."';");<br />
}</span>
</code></div>
  </div>
 </div>
 <a name="29551"></a>
 <div class="note">
  <strong>software at serv-a-com dot com</strong><br />
  <a href="#29551">17-Feb-2003 09:10</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
2. Pre Parser Strings and New Line Delimited Data<br />
One important thing to note at this point is that the xml_parse function requires a string variable. You can manipulate the content of any string variable easily as we all know. <br />
<br />
A better approach to removing newlines than:<br />
while ($data = fread($fp, 4096)) {<br />
$data = preg_replace("/\n|\r/","",$data); //flarp<br />
if (!xml_parse($xml_parser, $data, feof($fp))) {...<br />
<br />
Above works across all 3 line-delimited text files&nbsp; (\n, \r, \r\n). But this could potentially (or will most likely) damage or scramble data contained in for example CDATA areas. As far as I am concerned end of line characters should not be used _within_ XML tags. What seems to be the ultimate solution is to pre-parse the loaded data this would require checking the position within the XML document and adding or subtracting (using a in-between fread temporary variable) data based on conditions like: "Is within tag", "Is within CDATA" etc. before fedding it to the parser. This of course opens up a new can of worms (as in parse data for the parser...). (above procedure would take place between fread and xml_parser calls this method would be compatible with the general usage examples on top of the page)<br />
<br />
3. The Answer to parsing arbitrary XML and Preprocessor Revisited<br />
You can't just feed any XML document to the parser you constructed and assuming that it will work! You have to know what kind of methods for storing data are used, for example is there a end of line delimited data in the&nbsp; file ?, Are there any carriage returns in the tags etc... XML files come formatted in different ways some are just a one long string of characters with out any end of line markers others have newlines, carriage returns or both (Microsloth Windows). May or may not contain space and other whitespace between tags. For this reason it is important to what I call Normalize the data before feeding it to the parser. You can perform this with regular expressions or plain old str_replace and concatenation. In many cases this can be done to the file it self sometimes to string data on the fly( as shown in the example above). But I feel it is important to normalize the data before even calling the function to call xml_parse. If you have the ability to access all data before that call you can convert it to what you fell the data should have been in the first place and omit many surprises and expensive regular expression substitution (in a tight spot) while fread'ing the data.</span>
</code></div>
  </div>
 </div>
 <a name="29550"></a>
 <div class="note">
  <strong>software at serv-a-com dot com</strong><br />
  <a href="#29550">17-Feb-2003 09:09</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
My previous XML post (software at serv-a-com dot com/22-Jan-2003 03:08) resulted in some of the visitors e-mailg me on the carriage return stripping issue with questions. I'll try to make the following mumble as brief and easy to understand as possible. <br />
<br />
1. Overview of the 4096 fragmentation issue<br />
As you know the following freads the file 4096 bytes at a time (that is 4KB) this is perhaps ok for testing expat and figuring out how things work, but it it rather dangerous in the production environment. Data may not be fully understandable due to fread fragmentation and improperly formatted due to numerous sources(formats) of data contained within (i.e. end of line delimited CDATA).<br />
<br />
while ($data = fread($fp, 4096)) {<br />
if (!xml_parse($xml_parser, $data, feof($fp))) {<br />
<br />
Sometimes to save time one may want to load it all up into a one big variable and leave all the worries to expat. I think anything under 500 KB is ok (as long as nobody knows about it). Some may argue that larger variables are acceptable or even necessary because of the magic that take place while parsing using xml_parse. Our XML parser(expat) works and can be successfully implemented only when we know what type of XML data we are dealing with, it's average size and structure of general layout and data contained within tags. For example if the tags are followed by a line delimiter like a new line we can read it with fgets in and with minimal effort make sure that no data will be sent to the function that does not end with a end tag. But this require a fair knowledge of the file's preference for storing XML data and tags (and a bit of code between reading data and xml_parse'ing it).</span>
</code></div>
  </div>
 </div>
 <a name="28744"></a>
 <div class="note">
  <strong>software at serv-a-com dot com</strong><br />
  <a href="#28744">22-Jan-2003 02:08</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
use:<br />
while ($data = str_replace("\n","",fread($fp, 4096))){<br />
<br />
instead of:<br />
while ($data = fread($fp, 4096)) {<br />
It will save you a headache.<br />
<br />
and in response to (simen at bleed dot no 11-Jan-2003 04:27) "If the 4096 byte buffer fills up..."<br />
Please take better care of your data don't just shove it in to the xml_parse() check and make sure that the tags are not sliced the middle, use a temporary variable between fread and xml_parse.</span>
</code></div>
  </div>
 </div>
 <a name="28400"></a>
 <div class="note">
  <strong>simen at bleed dot no</strong><br />
  <a href="#28400">11-Jan-2003 03:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I was experiencing really wierd behaviour loading a large XML document (91k) since the buffer of 4096, when reading the file actually doesn't take into consideration the following:<br />
<br />
&lt;node&gt;this is my value&lt;/node&gt;<br />
<br />
If the 4096 byte buffer fills up at "my", you will get a split string into your xml_set_character_data_handler().<br />
<br />
The only solution I've found so far is to read the whole document into a variable and then parse.</span>
</code></div>
  </div>
 </div>
 <a name="26542"></a>
 <div class="note">
  <strong>sfaulkner at hoovers dot com</strong><br />
  <a href="#26542">04-Nov-2002 12:29</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Building on... This allows you to return the value of an element using an XPath reference.&nbsp; This code would of course need error handling added :-)<br />
<br />
&nbsp;function GetElementByName ($xml, $start, $end) {<br />
&nbsp;&nbsp; $startpos = strpos($xml, $start);<br />
&nbsp;&nbsp; if ($startpos === false) {<br />
&nbsp;&nbsp; &nbsp; return false;<br />
&nbsp;&nbsp; }<br />
&nbsp;&nbsp; $endpos = strpos($xml, $end);<br />
&nbsp;&nbsp; $endpos = $endpos+strlen($end);&nbsp; &nbsp; <br />
&nbsp;&nbsp; $endpos = $endpos-$startpos;<br />
&nbsp;&nbsp; $endpos = $endpos - strlen($end);<br />
&nbsp;&nbsp; $tag = substr ($xml, $startpos, $endpos);<br />
&nbsp;&nbsp; $tag = substr ($tag, strlen($start));<br />
&nbsp;&nbsp; return $tag;<br />
&nbsp;}<br />
&nbsp;<br />
&nbsp;function XPathValue($XPath,$XML) {<br />
&nbsp;&nbsp; $XPathArray = explode("/",$XPath);<br />
&nbsp;&nbsp; $node = $XML;<br />
&nbsp;&nbsp; while (list($key,$value) = each($XPathArray)) {<br />
&nbsp;&nbsp; &nbsp; $node = GetElementByName($node, "&lt;$value&gt;", "&lt;/$value&gt;"); <br />
&nbsp;&nbsp; }<br />
&nbsp;&nbsp; <br />
&nbsp;&nbsp; return $node;<br />
&nbsp;}<br />
&nbsp;<br />
&nbsp; print XPathValue("Response/Shipment/TotalCharges/Value",$xml);</span>
</code></div>
  </div>
 </div>
 <a name="25557"></a>
 <div class="note">
  <strong>guy  at  bhaktiandvedanta dot com</strong><br />
  <a href="#25557">27-Sep-2002 12:01</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
For a simple XML parser you can use this function. It doesn't require any extensions to run.<br />
<br />
&lt;?<br />
// Extracts content from XML tag<br />
<br />
function GetElementByName ($xml, $start, $end) {<br />
<br />
&nbsp;&nbsp;&nbsp; global $pos;<br />
&nbsp;&nbsp;&nbsp; $startpos = strpos($xml, $start);<br />
&nbsp;&nbsp;&nbsp; if ($startpos === false) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return false;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; $endpos = strpos($xml, $end);<br />
&nbsp;&nbsp;&nbsp; $endpos = $endpos+strlen($end);&nbsp; &nbsp; <br />
&nbsp;&nbsp;&nbsp; $pos = $endpos;<br />
&nbsp;&nbsp;&nbsp; $endpos = $endpos-$startpos;<br />
&nbsp;&nbsp;&nbsp; $endpos = $endpos - strlen($end);<br />
&nbsp;&nbsp;&nbsp; $tag = substr ($xml, $startpos, $endpos);<br />
&nbsp;&nbsp;&nbsp; $tag = substr ($tag, strlen($start));<br />
<br />
&nbsp;&nbsp;&nbsp; return $tag;<br />
<br />
}<br />
<br />
// Open and read xml file. You can replace this with your xml data.<br />
<br />
$file = "data.xml";<br />
$pos = 0;<br />
$Nodes = array();<br />
<br />
if (!($fp = fopen($file, "r"))) {<br />
&nbsp;&nbsp;&nbsp; die("could not open XML input");<br />
}<br />
while ($getline = fread($fp, 4096)) {<br />
&nbsp;&nbsp;&nbsp; $data = $data . $getline;<br />
}<br />
<br />
$count = 0;<br />
$pos = 0;<br />
<br />
// Goes throw XML file and creates an array of all &lt;XML_TAG&gt; tags.<br />
while ($node = GetElementByName($data, "&lt;XML_TAG&gt;", "&lt;/XML_TAG&gt;")) {<br />
&nbsp;&nbsp;&nbsp; $Nodes[$count] = $node;<br />
&nbsp;&nbsp;&nbsp; $count++;<br />
&nbsp;&nbsp;&nbsp; $data = substr($data, $pos);<br />
}<br />
<br />
// Gets infomation from tag siblings.<br />
for ($i=0; $i&lt;$count; $i++) {<br />
$code = GetElementByName($Nodes[$i], "&lt;Code&gt;", "&lt;/Code&gt;");<br />
$desc = GetElementByName($Nodes[$i], "&lt;Description&gt;", "&lt;/Description&gt;");<br />
$price = GetElementByName($Nodes[$i], "&lt;BasePrice&gt;", "&lt;/BasePrice&gt;");<br />
}<br />
?&gt;<br />
<br />
Hope this helps! :)<br />
Guy Laor</span>
</code></div>
  </div>
 </div>
 <a name="25301"></a>
 <div class="note">
  <strong>dmarsh dot NO dot SPAM dot PLEASE at spscc dot ctc dot edu</strong><br />
  <a href="#25301">18-Sep-2002 12:27</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
Some reference code I am working on as "XML Library" of which I am folding it info an object. Notice the use of the DEFINE:<br />
<br />
Mainly Example 1 and parts of 2 &amp; 3 re-written as an object: <br />
--- MyXMLWalk.lib.php ---<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">if (!</span><span class="default">defined</span><span class="keyword">(</span><span class="string">"PHPXMLWalk"</span><span class="keyword">)) {<br />
</span><span class="default">define</span><span class="keyword">(</span><span class="string">"PHPXMLWalk"</span><span class="keyword">,</span><span class="default">TRUE</span><span class="keyword">);<br />
<br />
class </span><span class="default">XMLWalk </span><span class="keyword">{<br />
&nbsp;var </span><span class="default">$p</span><span class="keyword">; </span><span class="comment">//short for xml parser;<br />
&nbsp;</span><span class="keyword">var </span><span class="default">$e</span><span class="keyword">; </span><span class="comment">//short for element stack/array<br />
<br />
&nbsp; </span><span class="keyword">function </span><span class="default">prl</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">,</span><span class="default">$i</span><span class="keyword">=</span><span class="default">0</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">ob_start</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$buf</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">ob_end_clean</span><span class="keyword">();<br />
&nbsp;&nbsp;&nbsp; return </span><span class="default">join</span><span class="keyword">(</span><span class="string">"\n"</span><span class="keyword">.</span><span class="default">str_repeat</span><span class="keyword">(</span><span class="string">" "</span><span class="keyword">,</span><span class="default">$i</span><span class="keyword">),</span><span class="default">split</span><span class="keyword">(</span><span class="string">"\n"</span><span class="keyword">,</span><span class="default">$buf</span><span class="keyword">));<br />
&nbsp; }<br />
<br />
&nbsp;function </span><span class="default">XMLWalk</span><span class="keyword">() {<br />
&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p </span><span class="keyword">= </span><span class="default">xml_parser_create</span><span class="keyword">();<br />
&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e </span><span class="keyword">= array();<br />
&nbsp; </span><span class="default">xml_parser_set_option</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">, </span><span class="default">XML_OPTION_CASE_FOLDING</span><span class="keyword">, </span><span class="default">true</span><span class="keyword">);<br />
&nbsp; </span><span class="default">xml_set_element_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">, array(&amp;</span><span class="default">$this</span><span class="keyword">, </span><span class="string">"startElement"</span><span class="keyword">), array(&amp;</span><span class="default">$this</span><span class="keyword">, </span><span class="string">"endElement"</span><span class="keyword">));<br />
&nbsp; </span><span class="default">xml_set_character_data_handler</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">, array(&amp;</span><span class="default">$this</span><span class="keyword">, </span><span class="string">"dataElement"</span><span class="keyword">));<br />
&nbsp; </span><span class="default">register_shutdown_function</span><span class="keyword">(array(&amp;</span><span class="default">$this</span><span class="keyword">, </span><span class="string">"free"</span><span class="keyword">)); </span><span class="comment">// make a destructor<br />
&nbsp; </span><span class="keyword">}<br />
<br />
&nbsp; function </span><span class="default">startElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">, </span><span class="default">$attrs</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; if (</span><span class="default">count</span><span class="keyword">(</span><span class="default">$attrs</span><span class="keyword">)&gt;=</span><span class="default">1</span><span class="keyword">) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$x </span><span class="keyword">= </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">prl</span><span class="keyword">(</span><span class="default">$attrs</span><span class="keyword">, </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]+</span><span class="default">6</span><span class="keyword">);<br />
&nbsp;&nbsp;&nbsp; } else {<br />
&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="default">$x </span><span class="keyword">= </span><span class="string">""</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; print </span><span class="default">str_repeat</span><span class="keyword">(</span><span class="string">" "</span><span class="keyword">,</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]+</span><span class="default">0</span><span class="keyword">). </span><span class="string">"$name $x\n"</span><span class="keyword">;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]++;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]++;<br />
&nbsp; }<br />
<br />
&nbsp; function </span><span class="default">dataElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; print </span><span class="default">str_repeat</span><span class="keyword">(</span><span class="string">" "</span><span class="keyword">,</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]+</span><span class="default">0</span><span class="keyword">). </span><span class="default">htmlspecialchars</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">, </span><span class="default">ENT_QUOTES</span><span class="keyword">) .</span><span class="string">"\n"</span><span class="keyword">;<br />
&nbsp; }<br />
<br />
&nbsp; function </span><span class="default">endElement</span><span class="keyword">(</span><span class="default">$parser</span><span class="keyword">, </span><span class="default">$name</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]--;<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">e</span><span class="keyword">[</span><span class="default">$parser</span><span class="keyword">]--;<br />
&nbsp; }<br />
&nbsp; function </span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">, </span><span class="default">$fp</span><span class="keyword">) {<br />
&nbsp;&nbsp;&nbsp; if (!</span><span class="default">xml_parse</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">, </span><span class="default">$data</span><span class="keyword">, </span><span class="default">feof</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; die(</span><span class="default">sprintf</span><span class="keyword">(</span><span class="string">"XML error: %s at line %d"</span><span class="keyword">,<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_error_string</span><span class="keyword">(</span><span class="default">xml_get_error_code</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="default">xml_get_current_line_number</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">)));<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
<br />
&nbsp; function </span><span class="default">free</span><span class="keyword">() {<br />
&nbsp;&nbsp;&nbsp; </span><span class="default">xml_parser_free</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">p</span><span class="keyword">);<br />
&nbsp; }<br />
<br />
} </span><span class="comment">// end of class<br />
<br />
</span><span class="keyword">} </span><span class="comment">// end of define<br />
<br />
</span><span class="default">?&gt;<br />
</span><br />
--- end of file ---<br />
<br />
Calling code:<br />
<span class="default">&lt;?php<br />
<br />
</span><span class="keyword">...<br />
<br />
require(</span><span class="string">"MyXMLWalk.lib.php"</span><span class="keyword">);<br />
<br />
</span><span class="default">$file </span><span class="keyword">= </span><span class="string">"x.xml"</span><span class="keyword">;<br />
<br />
</span><span class="default">$xme </span><span class="keyword">= new </span><span class="default">XMLWalk</span><span class="keyword">;<br />
<br />
if (!(</span><span class="default">$fp </span><span class="keyword">= </span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">, </span><span class="string">"r"</span><span class="keyword">))) {<br />
&nbsp;&nbsp;&nbsp; die(</span><span class="string">"could not open XML input"</span><span class="keyword">);<br />
}<br />
<br />
while (</span><span class="default">$data </span><span class="keyword">= </span><span class="default">fread</span><span class="keyword">(</span><span class="default">$fp</span><span class="keyword">, </span><span class="default">4096</span><span class="keyword">)) {<br />
&nbsp; </span><span class="default">$xme</span><span class="keyword">-&gt;</span><span class="default">parse</span><span class="keyword">(</span><span class="default">$data</span><span class="keyword">, </span><span class="default">$fp</span><span class="keyword">);<br />
}<br />
<br />
...<br />
</span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
 <a name="24378"></a>
 <div class="note">
  <strong>jon at gettys dot org</strong><br />
  <a href="#24378">14-Aug-2002 01:59</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
[Editor's note: see also xml_parse_into_struct().]<br />
<br />
Very simple routine to convert an XML file into a PHP structure. $obj-&gt;xml contains the resulting PHP structure. I would be interested if someone could suggest a cleaner method than the evals I am using.<br />
<br />
&lt;?<br />
$filename = 'sample.xml';<br />
$obj-&gt;tree = '$obj-&gt;xml';<br />
$obj-&gt;xml = '';<br />
<br />
function startElement($parser, $name, $attrs) {<br />
&nbsp;&nbsp;&nbsp; global $obj;<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; // If var already defined, make array<br />
&nbsp;&nbsp;&nbsp; eval('$test=isset('.$obj-&gt;tree.'-&gt;'.$name.');');<br />
&nbsp;&nbsp;&nbsp; if ($test) {<br />
&nbsp;&nbsp; &nbsp;&nbsp; eval('$tmp='.$obj-&gt;tree.'-&gt;'.$name.';');<br />
&nbsp;&nbsp; &nbsp;&nbsp; eval('$arr=is_array('.$obj-&gt;tree.'-&gt;'.$name.');');<br />
&nbsp;&nbsp; &nbsp;&nbsp; if (!$arr) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; eval('unset('.$obj-&gt;tree.'-&gt;'.$name.');');<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; eval($obj-&gt;tree.'-&gt;'.$name.'[0]=$tmp;');<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $cnt = 1;<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; else {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; eval('$cnt=count('.$obj-&gt;tree.'-&gt;'.$name.');');<br />
&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp; &nbsp;&nbsp; <br />
&nbsp;&nbsp; &nbsp;&nbsp; $obj-&gt;tree .= '-&gt;'.$name."[$cnt]";<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; else {<br />
&nbsp;&nbsp; &nbsp;&nbsp; $obj-&gt;tree .= '-&gt;'.$name;<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; if (count($attrs)) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; eval($obj-&gt;tree.'-&gt;attr=$attrs;');<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
function endElement($parser, $name) {<br />
&nbsp;&nbsp;&nbsp; global $obj;<br />
&nbsp;&nbsp;&nbsp; // Strip off last -&gt;<br />
&nbsp;&nbsp;&nbsp; for($a=strlen($obj-&gt;tree);$a&gt;0;$a--) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (substr($obj-&gt;tree, $a, 2) == '-&gt;') {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; $obj-&gt;tree = substr($obj-&gt;tree, 0, $a);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
<br />
function characterData($parser, $data) {<br />
&nbsp;&nbsp;&nbsp; global $obj;<br />
<br />
&nbsp;&nbsp;&nbsp; eval($obj-&gt;tree.'-&gt;data=\''.$data.'\';');<br />
}<br />
<br />
$xml_parser = xml_parser_create();<br />
xml_set_element_handler($xml_parser, "startElement", "endElement");<br />
xml_set_character_data_handler($xml_parser, "characterData");<br />
if (!($fp = fopen($filename, "r"))) {<br />
&nbsp;&nbsp;&nbsp; die("could not open XML input");<br />
}<br />
<br />
while ($data = fread($fp, 4096)) {<br />
&nbsp;&nbsp;&nbsp; if (!xml_parse($xml_parser, $data, feof($fp))) {<br />
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; die(sprintf("XML error: %s at line %d",<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; xml_error_string(xml_get_error_code($xml_parser)),<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; xml_get_current_line_number($xml_parser)));<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
xml_parser_free($xml_parser);<br />
print_r($obj-&gt;xml);<br />
return 0;<br />
<br />
?&gt;</span>
</code></div>
  </div>
 </div>
 <a name="20769"></a>
 <div class="note">
  <strong>danielc at analysisandsolutions dot com</strong><br />
  <a href="#20769">15-Apr-2002 02:23</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I put up a good, simple, real world example of how to parse XML documents. While the sample grabs stock quotes off of the web, you can tweak it to do whatever you need.<br />
<br />
<a href="http://www.analysisandsolutions.com/code/phpxml.htm" target="_blank">http://www.analysisandsolutions.com/code/phpxml.htm</a></span>
</code></div>
  </div>
 </div>
 <a name="20115"></a>
 <div class="note">
  <strong>jason at N0SPAM dot projectexpanse dot com</strong><br />
  <a href="#20115">22-Mar-2002 01:16</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
In reference to the note made by sam@cwa.co.nz about parsing entities:<br />
<br />
I could be wrong, but since it is possible to define your own entities within an XML DTD, the cdata handler function parses these individually to allow for your own implementation of those entities within your cdata handler.</span>
</code></div>
  </div>
 </div>
 <a name="19413"></a>
 <div class="note">
  <strong>jason at NOSPAM_projectexpanse_NOSPAM dot com</strong><br />
  <a href="#19413">26-Feb-2002 04:11</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
For newbies wanting a good tutorial on how to actually get started and where to go from this listing of functions, then visit:<br />
<a href="http://www.wirelessdevnet.com/channels/wap/features/xmlcast_php.html" target="_blank">http://www.wirelessdevnet.com/channels/wap/features/xmlcast_php.html</a><br />
<br />
It shows an excellent example of how to read the XML data into a class file so you can actually process it, not just display it all pretty-like, like many tutorials on PHP/XML seem to be doing.</span>
</code></div>
  </div>
 </div>
 <a name="18477"></a>
 <div class="note">
  <strong>hans dot schneider at bbdo-interone dot de</strong><br />
  <a href="#18477">24-Jan-2002 08:43</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I had to TRIM the data when I passed one large String containig a wellformed XML-File to xml_parse. The String was read by CURL, which aparently put a BLANK at the end of the String. This BLANK produced a "XML not wellformed"-Error in xml_parse!</span>
</code></div>
  </div>
 </div>
 <a name="8799"></a>
 <div class="note">
  <strong>sam at cwa dot co dot nz</strong><br />
  <a href="#8799">28-Sep-2000 07:39</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
I've discovered some unusual behaviour in this API when ampersand entities are parsed in cdata; for some reason the parser breaks up the section around the entities, and calls the handler repeated times for each of the sections. If you don't allow for this oddity and you are trying to put the cdata into a variable, only the last part will be stored. <br />
<br />
You can get around this with a line like:<br />
<br />
$foo .= $cdata;<br />
<br />
If the handler is called several times from the same tag, it will append them, rather than rewriting the variable each time. If the entire cdata section is returned, it doesn't matter.<br />
<br />
May happen for other entities, but I haven't investigated.<br />
<br />
Took me a while to figure out what was happening; hope this saves someone else the trouble.</span>
</code></div>
  </div>
 </div>
 <a name="1108"></a>
 <div class="note">
  <strong>Daniel dot Rendall at btinternet dot com</strong><br />
  <a href="#1108">07-Jul-1999 10:21</a>
  <div class="text">
<div class="phpcode"><code><span class="html">
When using the XML parser, make sure you're not using the magic quotes option (e.g. use set_magic_quotes_runtime(0) if it's not the compiled default), otherwise you'll get 'not well-formed' errors when dealing with tags with attributes set in them.</span>
</code></div>
  </div>
 </div>
 <div class="foot"><a href="/manual/add-note.php?sect=ref.xml&amp;redirect=http://www.php.net/manual/en/ref.xml.php"><img src="http://static.php.net/www.php.net/images/notes-add.gif" alt="add a note" width="13" height="13" align="middle" /></a> <small><a href="/manual/add-note.php?sect=ref.xml&amp;redirect=http://www.php.net/manual/en/ref.xml.php">add a note</a></small></div>
</div><br /><!--UdmComment-->
<div class="manualnavbar manualnavbar_bottom">
 <span class="next">
  <a href="function.utf8-decode.php">utf8_decode<img src="http://static.php.net/www.php.net/images/caret-r.gif" alt="&gt;" width="11" height="7" /></a>
 </span>
 <span class="prev">
  <a href="book.xml.php"><img src="http://static.php.net/www.php.net/images/caret-l.gif" alt="&lt;" width="11" height="7" />XML Parser</a>
 </span>
 <hr />
 <span class="lastupdated">Last updated: Fri, 11 Apr 2008</span>
 <div class="langchooser">
  &nbsp;
 </div>
</div>
<!--/UdmComment-->


 </div>
 <div class="cleaner">&nbsp;</div>
</div>

<div id="footnav">
   <a href="/source.php?url=/manual/en/ref.xml.php">show source</a> |
 <a href="/credits.php">credits</a> |
 <a href="/stats/">stats</a> |
 <a href="/sitemap.php">sitemap</a> |
 <a href="/contact.php">contact</a> |
 <a href="/contact.php#ads">advertising</a> |
 <a href="/mirrors.php">mirror sites</a>
</div>

<div id="pagefooter">
 <div id="copyright">
  <a href="/copyright.php">Copyright &copy; 2001-2008 The PHP Group</a><br />
  All rights reserved.
 </div>

 <div id="thismirror">
  <a href="/mirror.php">This mirror</a> generously provided by:
  <a href="http://developer.yahoo.com/">Yahoo! Inc.</a><br />
  Last updated: Wed Apr 16 05:27:53 2008 PDT
 </div>
</div>

</body>
</html>